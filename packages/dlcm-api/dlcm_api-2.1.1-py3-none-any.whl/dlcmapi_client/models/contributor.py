# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class Contributor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'creation': 'ChangeInfo',
        'deposit_number': 'float',
        'first_name': 'str',
        'full_name': 'str',
        'last_name': 'str',
        'last_update': 'ChangeInfo',
        'orcid': 'str',
        'res_id': 'str',
        'verified_orcid': 'bool'
    }

    attribute_map = {
        'links': '_links',
        'creation': 'creation',
        'deposit_number': 'depositNumber',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'last_name': 'lastName',
        'last_update': 'lastUpdate',
        'orcid': 'orcid',
        'res_id': 'resId',
        'verified_orcid': 'verifiedOrcid'
    }

    def __init__(self, links=None, creation=None, deposit_number=None, first_name=None, full_name=None, last_name=None, last_update=None, orcid=None, res_id=None, verified_orcid=None, local_vars_configuration=None):  # noqa: E501
        """Contributor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._creation = None
        self._deposit_number = None
        self._first_name = None
        self._full_name = None
        self._last_name = None
        self._last_update = None
        self._orcid = None
        self._res_id = None
        self._verified_orcid = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if creation is not None:
            self.creation = creation
        if deposit_number is not None:
            self.deposit_number = deposit_number
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if last_name is not None:
            self.last_name = last_name
        if last_update is not None:
            self.last_update = last_update
        if orcid is not None:
            self.orcid = orcid
        if res_id is not None:
            self.res_id = res_id
        if verified_orcid is not None:
            self.verified_orcid = verified_orcid

    @property
    def links(self):
        """Gets the links of this Contributor.  # noqa: E501

        The _links_ list of the _contributors_ resource  # noqa: E501

        :return: The links of this Contributor.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Contributor.

        The _links_ list of the _contributors_ resource  # noqa: E501

        :param links: The links of this Contributor.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def creation(self):
        """Gets the creation of this Contributor.  # noqa: E501


        :return: The creation of this Contributor.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this Contributor.


        :param creation: The creation of this Contributor.  # noqa: E501
        :type: ChangeInfo
        """

        self._creation = creation

    @property
    def deposit_number(self):
        """Gets the deposit_number of this Contributor.  # noqa: E501

        The deposit number of the contributor  # noqa: E501

        :return: The deposit_number of this Contributor.  # noqa: E501
        :rtype: float
        """
        return self._deposit_number

    @deposit_number.setter
    def deposit_number(self, deposit_number):
        """Sets the deposit_number of this Contributor.

        The deposit number of the contributor  # noqa: E501

        :param deposit_number: The deposit_number of this Contributor.  # noqa: E501
        :type: float
        """

        self._deposit_number = deposit_number

    @property
    def first_name(self):
        """Gets the first_name of this Contributor.  # noqa: E501

        The first name of the contributor  # noqa: E501

        :return: The first_name of this Contributor.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contributor.

        The first name of the contributor  # noqa: E501

        :param first_name: The first_name of this Contributor.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this Contributor.  # noqa: E501

        The full name of the contributor  # noqa: E501

        :return: The full_name of this Contributor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Contributor.

        The full name of the contributor  # noqa: E501

        :param full_name: The full_name of this Contributor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def last_name(self):
        """Gets the last_name of this Contributor.  # noqa: E501

        The last name of the contributor  # noqa: E501

        :return: The last_name of this Contributor.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contributor.

        The last name of the contributor  # noqa: E501

        :param last_name: The last_name of this Contributor.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def last_update(self):
        """Gets the last_update of this Contributor.  # noqa: E501


        :return: The last_update of this Contributor.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Contributor.


        :param last_update: The last_update of this Contributor.  # noqa: E501
        :type: ChangeInfo
        """

        self._last_update = last_update

    @property
    def orcid(self):
        """Gets the orcid of this Contributor.  # noqa: E501

        The ORCID of the contributor  # noqa: E501

        :return: The orcid of this Contributor.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this Contributor.

        The ORCID of the contributor  # noqa: E501

        :param orcid: The orcid of this Contributor.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def res_id(self):
        """Gets the res_id of this Contributor.  # noqa: E501

        The _contributors_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :return: The res_id of this Contributor.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this Contributor.

        The _contributors_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :param res_id: The res_id of this Contributor.  # noqa: E501
        :type: str
        """

        self._res_id = res_id

    @property
    def verified_orcid(self):
        """Gets the verified_orcid of this Contributor.  # noqa: E501

        if the contributor ORCID is verified  # noqa: E501

        :return: The verified_orcid of this Contributor.  # noqa: E501
        :rtype: bool
        """
        return self._verified_orcid

    @verified_orcid.setter
    def verified_orcid(self, verified_orcid):
        """Sets the verified_orcid of this Contributor.

        if the contributor ORCID is verified  # noqa: E501

        :param verified_orcid: The verified_orcid of this Contributor.  # noqa: E501
        :type: bool
        """

        self._verified_orcid = verified_orcid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contributor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Contributor):
            return True

        return self.to_dict() != other.to_dict()
