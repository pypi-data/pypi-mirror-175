# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class DisseminationPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'creation': 'ChangeInfo',
        'destination_server': 'str',
        'last_update': 'ChangeInfo',
        'name': 'str',
        'res_id': 'str',
        'sub_folder': 'str',
        'type': 'str',
        'use_number': 'float'
    }

    attribute_map = {
        'links': '_links',
        'creation': 'creation',
        'destination_server': 'destinationServer',
        'last_update': 'lastUpdate',
        'name': 'name',
        'res_id': 'resId',
        'sub_folder': 'subFolder',
        'type': 'type',
        'use_number': 'useNumber'
    }

    def __init__(self, links=None, creation=None, destination_server=None, last_update=None, name=None, res_id=None, sub_folder=None, type=None, use_number=None, local_vars_configuration=None):  # noqa: E501
        """DisseminationPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._creation = None
        self._destination_server = None
        self._last_update = None
        self._name = None
        self._res_id = None
        self._sub_folder = None
        self._type = None
        self._use_number = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if creation is not None:
            self.creation = creation
        if destination_server is not None:
            self.destination_server = destination_server
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        if res_id is not None:
            self.res_id = res_id
        if sub_folder is not None:
            self.sub_folder = sub_folder
        if type is not None:
            self.type = type
        if use_number is not None:
            self.use_number = use_number

    @property
    def links(self):
        """Gets the links of this DisseminationPolicy.  # noqa: E501

        The _links_ list of the _dissemination-policies_ resource  # noqa: E501

        :return: The links of this DisseminationPolicy.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DisseminationPolicy.

        The _links_ list of the _dissemination-policies_ resource  # noqa: E501

        :param links: The links of this DisseminationPolicy.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def creation(self):
        """Gets the creation of this DisseminationPolicy.  # noqa: E501


        :return: The creation of this DisseminationPolicy.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this DisseminationPolicy.


        :param creation: The creation of this DisseminationPolicy.  # noqa: E501
        :type: ChangeInfo
        """

        self._creation = creation

    @property
    def destination_server(self):
        """Gets the destination_server of this DisseminationPolicy.  # noqa: E501

        The destinationServer of the dissemination policy  # noqa: E501

        :return: The destination_server of this DisseminationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._destination_server

    @destination_server.setter
    def destination_server(self, destination_server):
        """Sets the destination_server of this DisseminationPolicy.

        The destinationServer of the dissemination policy  # noqa: E501

        :param destination_server: The destination_server of this DisseminationPolicy.  # noqa: E501
        :type: str
        """

        self._destination_server = destination_server

    @property
    def last_update(self):
        """Gets the last_update of this DisseminationPolicy.  # noqa: E501


        :return: The last_update of this DisseminationPolicy.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this DisseminationPolicy.


        :param last_update: The last_update of this DisseminationPolicy.  # noqa: E501
        :type: ChangeInfo
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this DisseminationPolicy.  # noqa: E501

        The name of the dissemination policy  # noqa: E501

        :return: The name of this DisseminationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DisseminationPolicy.

        The name of the dissemination policy  # noqa: E501

        :param name: The name of this DisseminationPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def res_id(self):
        """Gets the res_id of this DisseminationPolicy.  # noqa: E501

        The _dissemination-policies_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :return: The res_id of this DisseminationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this DisseminationPolicy.

        The _dissemination-policies_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :param res_id: The res_id of this DisseminationPolicy.  # noqa: E501
        :type: str
        """

        self._res_id = res_id

    @property
    def sub_folder(self):
        """Gets the sub_folder of this DisseminationPolicy.  # noqa: E501

        The subfolder of the dissemination policy  # noqa: E501

        :return: The sub_folder of this DisseminationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._sub_folder

    @sub_folder.setter
    def sub_folder(self, sub_folder):
        """Sets the sub_folder of this DisseminationPolicy.

        The subfolder of the dissemination policy  # noqa: E501

        :param sub_folder: The sub_folder of this DisseminationPolicy.  # noqa: E501
        :type: str
        """

        self._sub_folder = sub_folder

    @property
    def type(self):
        """Gets the type of this DisseminationPolicy.  # noqa: E501

        The type of the dissemination policy  # noqa: E501

        :return: The type of this DisseminationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisseminationPolicy.

        The type of the dissemination policy  # noqa: E501

        :param type: The type of this DisseminationPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["IIIF", "WEB"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_number(self):
        """Gets the use_number of this DisseminationPolicy.  # noqa: E501

        Use number in organizational units of the dissemination policy  # noqa: E501

        :return: The use_number of this DisseminationPolicy.  # noqa: E501
        :rtype: float
        """
        return self._use_number

    @use_number.setter
    def use_number(self, use_number):
        """Sets the use_number of this DisseminationPolicy.

        Use number in organizational units of the dissemination policy  # noqa: E501

        :param use_number: The use_number of this DisseminationPolicy.  # noqa: E501
        :type: float
        """

        self._use_number = use_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisseminationPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DisseminationPolicy):
            return True

        return self.to_dict() != other.to_dict()
