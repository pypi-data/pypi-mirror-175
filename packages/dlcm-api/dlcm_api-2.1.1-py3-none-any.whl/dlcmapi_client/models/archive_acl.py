# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class ArchiveAcl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'aip_id': 'str',
        'creation': 'ChangeInfo',
        'expiration': 'datetime',
        'expired': 'bool',
        'last_update': 'ChangeInfo',
        'organizational_unit': 'ArchiveAclOrganizationalUnit',
        'res_id': 'str',
        'user': 'ArchiveAclUser'
    }

    attribute_map = {
        'links': '_links',
        'aip_id': 'aipId',
        'creation': 'creation',
        'expiration': 'expiration',
        'expired': 'expired',
        'last_update': 'lastUpdate',
        'organizational_unit': 'organizationalUnit',
        'res_id': 'resId',
        'user': 'user'
    }

    def __init__(self, links=None, aip_id=None, creation=None, expiration=None, expired=None, last_update=None, organizational_unit=None, res_id=None, user=None, local_vars_configuration=None):  # noqa: E501
        """ArchiveAcl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._aip_id = None
        self._creation = None
        self._expiration = None
        self._expired = None
        self._last_update = None
        self._organizational_unit = None
        self._res_id = None
        self._user = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if aip_id is not None:
            self.aip_id = aip_id
        if creation is not None:
            self.creation = creation
        if expiration is not None:
            self.expiration = expiration
        if expired is not None:
            self.expired = expired
        if last_update is not None:
            self.last_update = last_update
        if organizational_unit is not None:
            self.organizational_unit = organizational_unit
        if res_id is not None:
            self.res_id = res_id
        if user is not None:
            self.user = user

    @property
    def links(self):
        """Gets the links of this ArchiveAcl.  # noqa: E501

        The _links_ list of the _archive-acl_ resource  # noqa: E501

        :return: The links of this ArchiveAcl.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ArchiveAcl.

        The _links_ list of the _archive-acl_ resource  # noqa: E501

        :param links: The links of this ArchiveAcl.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def aip_id(self):
        """Gets the aip_id of this ArchiveAcl.  # noqa: E501

        The ID of the archive ACL  # noqa: E501

        :return: The aip_id of this ArchiveAcl.  # noqa: E501
        :rtype: str
        """
        return self._aip_id

    @aip_id.setter
    def aip_id(self, aip_id):
        """Sets the aip_id of this ArchiveAcl.

        The ID of the archive ACL  # noqa: E501

        :param aip_id: The aip_id of this ArchiveAcl.  # noqa: E501
        :type: str
        """

        self._aip_id = aip_id

    @property
    def creation(self):
        """Gets the creation of this ArchiveAcl.  # noqa: E501


        :return: The creation of this ArchiveAcl.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this ArchiveAcl.


        :param creation: The creation of this ArchiveAcl.  # noqa: E501
        :type: ChangeInfo
        """

        self._creation = creation

    @property
    def expiration(self):
        """Gets the expiration of this ArchiveAcl.  # noqa: E501

        The expiration date of the archive ACL  # noqa: E501

        :return: The expiration of this ArchiveAcl.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ArchiveAcl.

        The expiration date of the archive ACL  # noqa: E501

        :param expiration: The expiration of this ArchiveAcl.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def expired(self):
        """Gets the expired of this ArchiveAcl.  # noqa: E501

        if the the archive ACL is expired  # noqa: E501

        :return: The expired of this ArchiveAcl.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this ArchiveAcl.

        if the the archive ACL is expired  # noqa: E501

        :param expired: The expired of this ArchiveAcl.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    @property
    def last_update(self):
        """Gets the last_update of this ArchiveAcl.  # noqa: E501


        :return: The last_update of this ArchiveAcl.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this ArchiveAcl.


        :param last_update: The last_update of this ArchiveAcl.  # noqa: E501
        :type: ChangeInfo
        """

        self._last_update = last_update

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this ArchiveAcl.  # noqa: E501


        :return: The organizational_unit of this ArchiveAcl.  # noqa: E501
        :rtype: ArchiveAclOrganizationalUnit
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this ArchiveAcl.


        :param organizational_unit: The organizational_unit of this ArchiveAcl.  # noqa: E501
        :type: ArchiveAclOrganizationalUnit
        """

        self._organizational_unit = organizational_unit

    @property
    def res_id(self):
        """Gets the res_id of this ArchiveAcl.  # noqa: E501

        The _archive-acl_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :return: The res_id of this ArchiveAcl.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this ArchiveAcl.

        The _archive-acl_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :param res_id: The res_id of this ArchiveAcl.  # noqa: E501
        :type: str
        """

        self._res_id = res_id

    @property
    def user(self):
        """Gets the user of this ArchiveAcl.  # noqa: E501


        :return: The user of this ArchiveAcl.  # noqa: E501
        :rtype: ArchiveAclUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ArchiveAcl.


        :param user: The user of this ArchiveAcl.  # noqa: E501
        :type: ArchiveAclUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArchiveAcl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArchiveAcl):
            return True

        return self.to_dict() != other.to_dict()
