# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class IndexFieldAlias(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'alias': 'str',
        'creation': 'ChangeInfo',
        'facet': 'bool',
        'facet_default_visible_values': 'float',
        'facet_limit': 'float',
        'facet_min_count': 'float',
        'facet_order': 'float',
        'field': 'str',
        'index_name': 'str',
        'labels': 'list[str]',
        'last_update': 'ChangeInfo',
        'res_id': 'str',
        'system': 'bool'
    }

    attribute_map = {
        'links': '_links',
        'alias': 'alias',
        'creation': 'creation',
        'facet': 'facet',
        'facet_default_visible_values': 'facetDefaultVisibleValues',
        'facet_limit': 'facetLimit',
        'facet_min_count': 'facetMinCount',
        'facet_order': 'facetOrder',
        'field': 'field',
        'index_name': 'indexName',
        'labels': 'labels',
        'last_update': 'lastUpdate',
        'res_id': 'resId',
        'system': 'system'
    }

    def __init__(self, links=None, alias=None, creation=None, facet=None, facet_default_visible_values=None, facet_limit=None, facet_min_count=None, facet_order=None, field=None, index_name=None, labels=None, last_update=None, res_id=None, system=None, local_vars_configuration=None):  # noqa: E501
        """IndexFieldAlias - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._alias = None
        self._creation = None
        self._facet = None
        self._facet_default_visible_values = None
        self._facet_limit = None
        self._facet_min_count = None
        self._facet_order = None
        self._field = None
        self._index_name = None
        self._labels = None
        self._last_update = None
        self._res_id = None
        self._system = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if alias is not None:
            self.alias = alias
        if creation is not None:
            self.creation = creation
        if facet is not None:
            self.facet = facet
        if facet_default_visible_values is not None:
            self.facet_default_visible_values = facet_default_visible_values
        if facet_limit is not None:
            self.facet_limit = facet_limit
        if facet_min_count is not None:
            self.facet_min_count = facet_min_count
        if facet_order is not None:
            self.facet_order = facet_order
        if field is not None:
            self.field = field
        if index_name is not None:
            self.index_name = index_name
        if labels is not None:
            self.labels = labels
        if last_update is not None:
            self.last_update = last_update
        if res_id is not None:
            self.res_id = res_id
        if system is not None:
            self.system = system

    @property
    def links(self):
        """Gets the links of this IndexFieldAlias.  # noqa: E501

        The _links_ list of the _index-field-aliases_ resource  # noqa: E501

        :return: The links of this IndexFieldAlias.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IndexFieldAlias.

        The _links_ list of the _index-field-aliases_ resource  # noqa: E501

        :param links: The links of this IndexFieldAlias.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def alias(self):
        """Gets the alias of this IndexFieldAlias.  # noqa: E501

        The name that will be exposed to clients (as a field or a facet)  # noqa: E501

        :return: The alias of this IndexFieldAlias.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this IndexFieldAlias.

        The name that will be exposed to clients (as a field or a facet)  # noqa: E501

        :param alias: The alias of this IndexFieldAlias.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def creation(self):
        """Gets the creation of this IndexFieldAlias.  # noqa: E501


        :return: The creation of this IndexFieldAlias.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this IndexFieldAlias.


        :param creation: The creation of this IndexFieldAlias.  # noqa: E501
        :type: ChangeInfo
        """

        self._creation = creation

    @property
    def facet(self):
        """Gets the facet of this IndexFieldAlias.  # noqa: E501

        Should a facet be created for this field ? default to false  # noqa: E501

        :return: The facet of this IndexFieldAlias.  # noqa: E501
        :rtype: bool
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this IndexFieldAlias.

        Should a facet be created for this field ? default to false  # noqa: E501

        :param facet: The facet of this IndexFieldAlias.  # noqa: E501
        :type: bool
        """

        self._facet = facet

    @property
    def facet_default_visible_values(self):
        """Gets the facet_default_visible_values of this IndexFieldAlias.  # noqa: E501

        Number of facet values displayed by default in the user interface  # noqa: E501

        :return: The facet_default_visible_values of this IndexFieldAlias.  # noqa: E501
        :rtype: float
        """
        return self._facet_default_visible_values

    @facet_default_visible_values.setter
    def facet_default_visible_values(self, facet_default_visible_values):
        """Sets the facet_default_visible_values of this IndexFieldAlias.

        Number of facet values displayed by default in the user interface  # noqa: E501

        :param facet_default_visible_values: The facet_default_visible_values of this IndexFieldAlias.  # noqa: E501
        :type: float
        """

        self._facet_default_visible_values = facet_default_visible_values

    @property
    def facet_limit(self):
        """Gets the facet_limit of this IndexFieldAlias.  # noqa: E501

        Maximum number of facets values to return if the IndexFieldAlias is a facet  # noqa: E501

        :return: The facet_limit of this IndexFieldAlias.  # noqa: E501
        :rtype: float
        """
        return self._facet_limit

    @facet_limit.setter
    def facet_limit(self, facet_limit):
        """Sets the facet_limit of this IndexFieldAlias.

        Maximum number of facets values to return if the IndexFieldAlias is a facet  # noqa: E501

        :param facet_limit: The facet_limit of this IndexFieldAlias.  # noqa: E501
        :type: float
        """

        self._facet_limit = facet_limit

    @property
    def facet_min_count(self):
        """Gets the facet_min_count of this IndexFieldAlias.  # noqa: E501

        Minimum number of occurrences of a facet value to be returned in facet results if the IndexFieldAlias is a facet  # noqa: E501

        :return: The facet_min_count of this IndexFieldAlias.  # noqa: E501
        :rtype: float
        """
        return self._facet_min_count

    @facet_min_count.setter
    def facet_min_count(self, facet_min_count):
        """Sets the facet_min_count of this IndexFieldAlias.

        Minimum number of occurrences of a facet value to be returned in facet results if the IndexFieldAlias is a facet  # noqa: E501

        :param facet_min_count: The facet_min_count of this IndexFieldAlias.  # noqa: E501
        :type: float
        """

        self._facet_min_count = facet_min_count

    @property
    def facet_order(self):
        """Gets the facet_order of this IndexFieldAlias.  # noqa: E501

        Determines the position of a facet in the user interface  # noqa: E501

        :return: The facet_order of this IndexFieldAlias.  # noqa: E501
        :rtype: float
        """
        return self._facet_order

    @facet_order.setter
    def facet_order(self, facet_order):
        """Sets the facet_order of this IndexFieldAlias.

        Determines the position of a facet in the user interface  # noqa: E501

        :param facet_order: The facet_order of this IndexFieldAlias.  # noqa: E501
        :type: float
        """

        self._facet_order = facet_order

    @property
    def field(self):
        """Gets the field of this IndexFieldAlias.  # noqa: E501

        The field path in the index  # noqa: E501

        :return: The field of this IndexFieldAlias.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this IndexFieldAlias.

        The field path in the index  # noqa: E501

        :param field: The field of this IndexFieldAlias.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def index_name(self):
        """Gets the index_name of this IndexFieldAlias.  # noqa: E501

        The name of the ElasticSearch index the field is for  # noqa: E501

        :return: The index_name of this IndexFieldAlias.  # noqa: E501
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this IndexFieldAlias.

        The name of the ElasticSearch index the field is for  # noqa: E501

        :param index_name: The index_name of this IndexFieldAlias.  # noqa: E501
        :type: str
        """

        self._index_name = index_name

    @property
    def labels(self):
        """Gets the labels of this IndexFieldAlias.  # noqa: E501

        Alias labels for each supported languages  # noqa: E501

        :return: The labels of this IndexFieldAlias.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IndexFieldAlias.

        Alias labels for each supported languages  # noqa: E501

        :param labels: The labels of this IndexFieldAlias.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def last_update(self):
        """Gets the last_update of this IndexFieldAlias.  # noqa: E501


        :return: The last_update of this IndexFieldAlias.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this IndexFieldAlias.


        :param last_update: The last_update of this IndexFieldAlias.  # noqa: E501
        :type: ChangeInfo
        """

        self._last_update = last_update

    @property
    def res_id(self):
        """Gets the res_id of this IndexFieldAlias.  # noqa: E501

        The _index-field-aliases_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :return: The res_id of this IndexFieldAlias.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this IndexFieldAlias.

        The _index-field-aliases_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :param res_id: The res_id of this IndexFieldAlias.  # noqa: E501
        :type: str
        """

        self._res_id = res_id

    @property
    def system(self):
        """Gets the system of this IndexFieldAlias.  # noqa: E501

        Is used by system  # noqa: E501

        :return: The system of this IndexFieldAlias.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this IndexFieldAlias.

        Is used by system  # noqa: E501

        :param system: The system of this IndexFieldAlias.  # noqa: E501
        :type: bool
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexFieldAlias):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexFieldAlias):
            return True

        return self.to_dict() != other.to_dict()
