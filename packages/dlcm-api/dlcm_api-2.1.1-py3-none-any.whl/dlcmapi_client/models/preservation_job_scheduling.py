# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class PreservationJobScheduling(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hour': 'float',
        'month': 'float',
        'month_day': 'float'
    }

    attribute_map = {
        'hour': 'hour',
        'month': 'month',
        'month_day': 'monthDay'
    }

    def __init__(self, hour=None, month=None, month_day=None, local_vars_configuration=None):  # noqa: E501
        """PreservationJobScheduling - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hour = None
        self._month = None
        self._month_day = None
        self.discriminator = None

        if hour is not None:
            self.hour = hour
        if month is not None:
            self.month = month
        if month_day is not None:
            self.month_day = month_day

    @property
    def hour(self):
        """Gets the hour of this PreservationJobScheduling.  # noqa: E501

        The hour to schedule a daily/weekly/monthly/yearly job  # noqa: E501

        :return: The hour of this PreservationJobScheduling.  # noqa: E501
        :rtype: float
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this PreservationJobScheduling.

        The hour to schedule a daily/weekly/monthly/yearly job  # noqa: E501

        :param hour: The hour of this PreservationJobScheduling.  # noqa: E501
        :type: float
        """

        self._hour = hour

    @property
    def month(self):
        """Gets the month of this PreservationJobScheduling.  # noqa: E501

        The month to schedule a yearly job  # noqa: E501

        :return: The month of this PreservationJobScheduling.  # noqa: E501
        :rtype: float
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this PreservationJobScheduling.

        The month to schedule a yearly job  # noqa: E501

        :param month: The month of this PreservationJobScheduling.  # noqa: E501
        :type: float
        """

        self._month = month

    @property
    def month_day(self):
        """Gets the month_day of this PreservationJobScheduling.  # noqa: E501

        The day of the month to schedule a monthly/yearly job  # noqa: E501

        :return: The month_day of this PreservationJobScheduling.  # noqa: E501
        :rtype: float
        """
        return self._month_day

    @month_day.setter
    def month_day(self, month_day):
        """Sets the month_day of this PreservationJobScheduling.

        The day of the month to schedule a monthly/yearly job  # noqa: E501

        :param month_day: The month_day of this PreservationJobScheduling.  # noqa: E501
        :type: float
        """

        self._month_day = month_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreservationJobScheduling):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PreservationJobScheduling):
            return True

        return self.to_dict() != other.to_dict()
