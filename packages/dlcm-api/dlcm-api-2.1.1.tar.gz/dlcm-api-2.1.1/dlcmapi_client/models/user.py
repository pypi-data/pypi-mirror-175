# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'application_role': 'object',
        'creation': 'ChangeInfo',
        'email': 'str',
        'enabled': 'bool',
        'external_uid': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'home_organization': 'str',
        'last_name': 'str',
        'last_update': 'ChangeInfo',
        'res_id': 'str'
    }

    attribute_map = {
        'links': '_links',
        'application_role': 'applicationRole',
        'creation': 'creation',
        'email': 'email',
        'enabled': 'enabled',
        'external_uid': 'externalUid',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'home_organization': 'homeOrganization',
        'last_name': 'lastName',
        'last_update': 'lastUpdate',
        'res_id': 'resId'
    }

    def __init__(self, links=None, application_role=None, creation=None, email=None, enabled=None, external_uid=None, first_name=None, full_name=None, home_organization=None, last_name=None, last_update=None, res_id=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._application_role = None
        self._creation = None
        self._email = None
        self._enabled = None
        self._external_uid = None
        self._first_name = None
        self._full_name = None
        self._home_organization = None
        self._last_name = None
        self._last_update = None
        self._res_id = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if application_role is not None:
            self.application_role = application_role
        if creation is not None:
            self.creation = creation
        if email is not None:
            self.email = email
        if enabled is not None:
            self.enabled = enabled
        if external_uid is not None:
            self.external_uid = external_uid
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if home_organization is not None:
            self.home_organization = home_organization
        if last_name is not None:
            self.last_name = last_name
        if last_update is not None:
            self.last_update = last_update
        if res_id is not None:
            self.res_id = res_id

    @property
    def links(self):
        """Gets the links of this User.  # noqa: E501

        The _links_ list of the _users_ resource  # noqa: E501

        :return: The links of this User.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this User.

        The _links_ list of the _users_ resource  # noqa: E501

        :param links: The links of this User.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def application_role(self):
        """Gets the application_role of this User.  # noqa: E501

        The application role details of the user  # noqa: E501

        :return: The application_role of this User.  # noqa: E501
        :rtype: object
        """
        return self._application_role

    @application_role.setter
    def application_role(self, application_role):
        """Sets the application_role of this User.

        The application role details of the user  # noqa: E501

        :param application_role: The application_role of this User.  # noqa: E501
        :type: object
        """

        self._application_role = application_role

    @property
    def creation(self):
        """Gets the creation of this User.  # noqa: E501


        :return: The creation of this User.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this User.


        :param creation: The creation of this User.  # noqa: E501
        :type: ChangeInfo
        """

        self._creation = creation

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email of the user  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email of the user  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501

        If the user is enable  # noqa: E501

        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.

        If the user is enable  # noqa: E501

        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def external_uid(self):
        """Gets the external_uid of this User.  # noqa: E501

        The external UID of the user  # noqa: E501

        :return: The external_uid of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_uid

    @external_uid.setter
    def external_uid(self, external_uid):
        """Sets the external_uid of this User.

        The external UID of the user  # noqa: E501

        :param external_uid: The external_uid of this User.  # noqa: E501
        :type: str
        """

        self._external_uid = external_uid

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        The first name of the user  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of the user  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501

        The full name of the user  # noqa: E501

        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.

        The full name of the user  # noqa: E501

        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def home_organization(self):
        """Gets the home_organization of this User.  # noqa: E501

        The home organization of the user  # noqa: E501

        :return: The home_organization of this User.  # noqa: E501
        :rtype: str
        """
        return self._home_organization

    @home_organization.setter
    def home_organization(self, home_organization):
        """Sets the home_organization of this User.

        The home organization of the user  # noqa: E501

        :param home_organization: The home_organization of this User.  # noqa: E501
        :type: str
        """

        self._home_organization = home_organization

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        The last name of the user  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of the user  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def last_update(self):
        """Gets the last_update of this User.  # noqa: E501


        :return: The last_update of this User.  # noqa: E501
        :rtype: ChangeInfo
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this User.


        :param last_update: The last_update of this User.  # noqa: E501
        :type: ChangeInfo
        """

        self._last_update = last_update

    @property
    def res_id(self):
        """Gets the res_id of this User.  # noqa: E501

        The _users_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :return: The res_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this User.

        The _users_ resource identifier [https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]]  # noqa: E501

        :param res_id: The res_id of this User.  # noqa: E501
        :type: str
        """

        self._res_id = res_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
