# coding: utf-8

"""
    DLCM-Solution

    DLCM application wrapping all modules, All-In-One  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: eresearch-opensource@unige.ch
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dlcmapi_client.configuration import Configuration


class Module(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access': 'str',
        'admin': 'str',
        'archival_storage': 'list[str]',
        'authorization': 'str',
        'data_management': 'str',
        'index': 'str',
        'ingest': 'str',
        'oai_info': 'str',
        'preingest': 'str'
    }

    attribute_map = {
        'access': 'access',
        'admin': 'admin',
        'archival_storage': 'archivalStorage',
        'authorization': 'authorization',
        'data_management': 'dataManagement',
        'index': 'index',
        'ingest': 'ingest',
        'oai_info': 'oaiInfo',
        'preingest': 'preingest'
    }

    def __init__(self, access=None, admin=None, archival_storage=None, authorization=None, data_management=None, index=None, ingest=None, oai_info=None, preingest=None, local_vars_configuration=None):  # noqa: E501
        """Module - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access = None
        self._admin = None
        self._archival_storage = None
        self._authorization = None
        self._data_management = None
        self._index = None
        self._ingest = None
        self._oai_info = None
        self._preingest = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if admin is not None:
            self.admin = admin
        if archival_storage is not None:
            self.archival_storage = archival_storage
        if authorization is not None:
            self.authorization = authorization
        if data_management is not None:
            self.data_management = data_management
        if index is not None:
            self.index = index
        if ingest is not None:
            self.ingest = ingest
        if oai_info is not None:
            self.oai_info = oai_info
        if preingest is not None:
            self.preingest = preingest

    @property
    def access(self):
        """Gets the access of this Module.  # noqa: E501

        The URL of _access_ module  # noqa: E501

        :return: The access of this Module.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Module.

        The URL of _access_ module  # noqa: E501

        :param access: The access of this Module.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def admin(self):
        """Gets the admin of this Module.  # noqa: E501

        The URL of _admin_ module  # noqa: E501

        :return: The admin of this Module.  # noqa: E501
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Module.

        The URL of _admin_ module  # noqa: E501

        :param admin: The admin of this Module.  # noqa: E501
        :type: str
        """

        self._admin = admin

    @property
    def archival_storage(self):
        """Gets the archival_storage of this Module.  # noqa: E501

        The URL list of _archival storage_ module  # noqa: E501

        :return: The archival_storage of this Module.  # noqa: E501
        :rtype: list[str]
        """
        return self._archival_storage

    @archival_storage.setter
    def archival_storage(self, archival_storage):
        """Sets the archival_storage of this Module.

        The URL list of _archival storage_ module  # noqa: E501

        :param archival_storage: The archival_storage of this Module.  # noqa: E501
        :type: list[str]
        """

        self._archival_storage = archival_storage

    @property
    def authorization(self):
        """Gets the authorization of this Module.  # noqa: E501

        The URL of _authoriration_ module  # noqa: E501

        :return: The authorization of this Module.  # noqa: E501
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this Module.

        The URL of _authoriration_ module  # noqa: E501

        :param authorization: The authorization of this Module.  # noqa: E501
        :type: str
        """

        self._authorization = authorization

    @property
    def data_management(self):
        """Gets the data_management of this Module.  # noqa: E501

        The URL of _data management_ module  # noqa: E501

        :return: The data_management of this Module.  # noqa: E501
        :rtype: str
        """
        return self._data_management

    @data_management.setter
    def data_management(self, data_management):
        """Sets the data_management of this Module.

        The URL of _data management_ module  # noqa: E501

        :param data_management: The data_management of this Module.  # noqa: E501
        :type: str
        """

        self._data_management = data_management

    @property
    def index(self):
        """Gets the index of this Module.  # noqa: E501

        The URL of _index_ module  # noqa: E501

        :return: The index of this Module.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Module.

        The URL of _index_ module  # noqa: E501

        :param index: The index of this Module.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def ingest(self):
        """Gets the ingest of this Module.  # noqa: E501

        The URL of _ingest_ module  # noqa: E501

        :return: The ingest of this Module.  # noqa: E501
        :rtype: str
        """
        return self._ingest

    @ingest.setter
    def ingest(self, ingest):
        """Sets the ingest of this Module.

        The URL of _ingest_ module  # noqa: E501

        :param ingest: The ingest of this Module.  # noqa: E501
        :type: str
        """

        self._ingest = ingest

    @property
    def oai_info(self):
        """Gets the oai_info of this Module.  # noqa: E501

        The URL of _OAI-PMH_ module  # noqa: E501

        :return: The oai_info of this Module.  # noqa: E501
        :rtype: str
        """
        return self._oai_info

    @oai_info.setter
    def oai_info(self, oai_info):
        """Sets the oai_info of this Module.

        The URL of _OAI-PMH_ module  # noqa: E501

        :param oai_info: The oai_info of this Module.  # noqa: E501
        :type: str
        """

        self._oai_info = oai_info

    @property
    def preingest(self):
        """Gets the preingest of this Module.  # noqa: E501

        The URL of _pre-ingest_ module  # noqa: E501

        :return: The preingest of this Module.  # noqa: E501
        :rtype: str
        """
        return self._preingest

    @preingest.setter
    def preingest(self, preingest):
        """Sets the preingest of this Module.

        The URL of _pre-ingest_ module  # noqa: E501

        :param preingest: The preingest of this Module.  # noqa: E501
        :type: str
        """

        self._preingest = preingest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Module):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Module):
            return True

        return self.to_dict() != other.to_dict()
