# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['spacy_cleaner',
 'spacy_cleaner.base',
 'spacy_cleaner.cleaning',
 'spacy_cleaner.processing',
 'spacy_cleaner.utils']

package_data = \
{'': ['*']}

install_requires = \
['spacy-lookups-data>=1.0.3,<1.1.0',
 'spacy>=3.4.1,<3.5.0',
 'tqdm>=4.64.0,<4.65.0']

setup_kwargs = {
    'name': 'spacy-cleaner',
    'version': '3.1.3',
    'description': 'Easily clean text with spaCy!',
    'long_description': '# spacy-cleaner\n\n<div align="center">\n\n![spacy-cleaner](https://raw.githubusercontent.com/Ce11an/spacy-cleaner/main/docs/assets/images/spacemen.png)\n\n[![Built with spaCy](https://img.shields.io/badge/built%20with-spaCy-09a3d5.svg)](https://spacy.io)\n[![Build status](https://github.com/Ce11an/spacy-cleaner/workflows/build/badge.svg?branch=main&event=push)](https://github.com/Ce11an/spacy-cleaner/actions?query=workflow%3Abuild)\n[![Python Version](https://img.shields.io/pypi/pyversions/spacy-cleaner.svg)](https://pypi.org/project/spacy-cleaner/)\n[![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/Ce11an/spacy-cleaner/pulls?utf8=%E2%9C%93&q=is%3Apr%20author%3Aapp%2Fdependabot)\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/Ce11an/spacy-cleaner/blob/main/.pre-commit-config.yaml)\n[![Semantic Versions](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg)](https://github.com/Ce11an/spacy-cleaner/releases)\n[![License](https://img.shields.io/github/license/Ce11an/spacy-cleaner)](https://github.com/Ce11an/spacy-cleaner/blob/main/LICENSE)\n[![codecov](https://codecov.io/gh/Ce11an/spacy-cleaner/branch/main/graph/badge.svg?token=H28KHYYFHX)](https://codecov.io/gh/Ce11an/spacy-cleaner)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Ce11an_spacy-cleaner&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=Ce11an_spacy-cleaner)\nEasily clean text with spaCy!\n\n</div>\n\n## Key Features\n\n**spacy-cleaner** utilises `spaCy` `Language` models to replace, remove, and \n  mutate `spaCy` tokens. Cleaning actions available are:\n\n* Remove/replace stopwords.\n* Remove/replace punctuation.\n* Remove/replace numbers.\n* Remove/replace emails.\n* Remove/replace URLs.\n* Perform lemmatisation.\n\nSee our [docs](https://ce11an.github.io/spacy-cleaner/) for more information.\n\n## Installation\n\n```bash\npip install -U spacy-cleaner\n```\n\nor install with `Poetry`\n\n```bash\npoetry add spacy-cleaner\n```\n\n## 📖 Example\n\n**spacy-cleaner** can clean text written in any language `spaCy` has a model \n  for:\n```python\nimport spacy\nimport spacy_cleaner\nfrom spacy_cleaner.processing import removers, replacers, mutators\n\nmodel = spacy.load("en_core_web_sm")\n```\n\nClass `Pipeline` allows for configurable cleaning of text using `spaCy`. The \n  `Pipeline` is initialised with a model and functions that transform `spaCy` \n  tokens:\n\n```python\npipeline = spacy_cleaner.Pipeline(\n    model,\n    removers.remove_stopword_token,\n    replacers.replace_punctuation_token,\n    mutators.mutate_lemma_token,\n)\n```\n\nNext the `pipeline` can be called with the method `clean` to clean a list of \n  texts:\n```python\ntexts = ["Hello, my name is Cellan! I love to swim!"]\n\npipeline.clean(texts)\n```\n\n<details markdown="1">\n<summary>About the method <code>clean</code>...</summary>\n\nThe method `clean` is a wrapper around the `spaCy` `Language` class method \n  `pipe`. Check the docs for more information:\n\nhttps://spacy.io/api/language#pipe\n\n</details>\n\nGiving the output:\n```python\n[\'hello _IS_PUNCT_ Cellan _IS_PUNCT_ love swim _IS_PUNCT_\']\n```\n\n### Makefile usage\n\n[`Makefile`](https://github.com/Ce11an/spacy-cleaner/blob/main/Makefile) contains a lot of functions for faster development.\n\n<details>\n<summary>1. Download and remove Poetry</summary>\n<p>\n\nTo download and install Poetry run:\n\n```bash\nmake poetry-download\n```\n\nTo uninstall\n\n```bash\nmake poetry-remove\n```\n\n</p>\n</details>\n\n<details>\n<summary>2. Install all dependencies and pre-commit hooks</summary>\n<p>\n\nInstall requirements:\n\n```bash\nmake install\n```\n\nPre-commit hooks can be installed after `git init` via\n\n```bash\nmake pre-commit-install\n```\n\n</p>\n</details>\n\n<details>\n<summary>3. Codestyle</summary>\n<p>\n\nAutomatic formatting uses `pyupgrade`, `isort` and `black`.\n\n```bash\nmake codestyle\n\n# or use synonym\nmake formatting\n```\n\nCodestyle checks only, without rewriting files:\n\n```bash\nmake check-codestyle\n```\n\n> Note: `check-codestyle` uses `isort`, `black` and `darglint` library\n\nUpdate all dev libraries to the latest version using one command\n\n```bash\nmake update-dev-deps\n```\n\n</details>\n\n<details>\n<summary>4. Type checks</summary>\n<p>\n\nRun `mypy` static type checker\n\n```bash\nmake mypy\n```\n\n</p>\n</details>\n\n<details>\n<summary>5. Tests with coverage badges</summary>\n<p>\n\nRun `pytest`\n\n```bash\nmake test\n```\n\n</p>\n</details>\n\n<details>\n<summary>6. All linters</summary>\n<p>\n\nOf course there is a command to ~~rule~~ run all linters in one:\n\n```bash\nmake lint\n```\n\nthe same as:\n\n```bash\nmake test && make check-codestyle && make mypy\n```\n\n</p>\n</details>\n\n<details>\n<summary>7. Cleanup</summary>\n<p>\nDelete pycache files\n\n```bash\nmake pycache-remove\n```\n\nRemove package build\n\n```bash\nmake build-remove\n```\n\nDelete .DS_STORE files\n\n```bash\nmake dsstore-remove\n```\n\nRemove .mypy_cache\n\n```bash\nmake mypycache-remove\n```\n\nOr to remove all above run:\n\n```bash\nmake cleanup\n```\n\n</p>\n</details>\n\n## 📈 Releases\n\nYou can see the list of available releases on the [GitHub Releases](https://github.com/Ce11an/spacy-cleaner/releases) page.\n\nWe follow [Semantic Versions](https://semver.org/) specification.\n\nWe use [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you’re ready. With the categories option, you can categorize pull requests in release notes using labels.\n\n### List of labels and corresponding titles\n\n|               **Label**               |  **Title in Releases**  |\n|:-------------------------------------:|:-----------------------:|\n|       `enhancement`, `feature`        |       🚀 Features       |\n| `bug`, `refactoring`, `bugfix`, `fix` | 🔧 Fixes & Refactoring  |\n|       `build`, `ci`, `testing`        | 📦 Build System & CI/CD |\n|              `breaking`               |   💥 Breaking Changes   |\n|            `documentation`            |    📝 Documentation     |\n|            `dependencies`             | ⬆️ Dependencies updates |\n\nYou can update it in [`release-drafter.yml`](https://github.com/Ce11an/spacy-cleaner/blob/main/.github/release-drafter.yml).\n\nGitHub creates the `bug`, `enhancement`, and `documentation` labels for you. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.\n\n## 🛡 License\n\n[![License](https://img.shields.io/github/license/Ce11an/spacy-cleaner)](https://github.com/Ce11an/spacy-cleaner/blob/main/LICENSE)\n\nThis project is licensed under the terms of the `MIT` license. See [LICENSE](https://github.com/Ce11an/spacy-cleaner/blob/main/LICENSE) for more details.\n\n## 📃 Citation\n\n```bibtex\n@misc{spacy-cleaner,\n  author = {spacy-cleaner},\n  title = {Easily clean text with spaCy!},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/Ce11an/spacy-cleaner}}\n}\n```\n\n## 🚀 Credits\n\nThis project was generated with [`python-package-template`](https://github.com/TezRomacH/python-package-template)\n\nThis project was built using [IntelliJ IDEA](https://www.jetbrains.com/community/opensource/?utm_campaign=opensource&utm_content=approved&utm_medium=email&utm_source=newsletter&utm_term=jblogo#support) \n\n![JetBrains Black Box Logo logo](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_square.svg)\n',
    'author': 'spacy-cleaner',
    'author_email': 'hallcellan@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/Ce11an/spacy-cleaner',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<3.11',
}


setup(**setup_kwargs)
