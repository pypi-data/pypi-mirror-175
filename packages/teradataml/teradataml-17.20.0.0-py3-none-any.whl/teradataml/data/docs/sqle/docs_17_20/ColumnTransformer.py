def ColumnTransformer(input_data = None, bincode_fit_data = None, function_fit_data = None,
                      nonlinearcombine_fit_data = None, onehotencoding_fit_data = None,
                      ordinalencoding_fit_data = None, outlierfilter_fit_data = None,
                      polynomialfeatures_fit_data = None, rownormalize_fit_data = None, scale_fit_data = None,
                      simpleimpute_fit_data = None, fillrowid_column_name = None, **generic_arguments):
        """
        DESCRIPTION:
            The ColumnTransformer() function transforms the input data columns in a single operation.Provide only
            the FIT dataframes generated by the Fit analytic functions, and the function runs all transformations
            that user require in a single operation.
            The function performs the following transformations:
                 * Scale Transform
                 * Bincode Transform
                 * Function Transform
                 * NonLinearCombine Transform
                 * OutlierFilter Transform
                 * PolynomialFeatures Transform
                 * RowNormalize Transform
                 * OrdinalEncoding Transform
                 * OneHotEncoding Transform
                 * SimpleImpute Transform
            User must create the FIT dataframe before using the function and must be provided in the same order
            as in the training data sequence to transform the dataset. The FIT dataframe can have maximum of
            128 columns.

        
        PARAMETERS:
            input_data:
                Required Argument.
                Specifies the teradataml DataFrame that contains input data.
                Types: teradataml DataFrame
            
            bincode_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the BincodeFit() function.
                Types: teradataml DataFrame
            
            function_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the Fit() function.
                Types: teradataml DataFrame
            
            nonlinearcombine_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the NonLinearCombineFit() function.
                Types: teradataml DataFrame
            
            onehotencoding_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the OneHotEncodingFit() function.
                Types: teradataml DataFrame
            
            ordinalencoding_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the OrdinalEncodingFit() function.
                Types: teradataml DataFrame
            
            outlierfilter_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the OutlierFilterFit() function.
                Types: teradataml DataFrame
            
            polynomialfeatures_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the PolynomialFeaturesFit() function.
                Types: teradataml DataFrame
            
            rownormalize_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the RowNormalizeFit() function.
                Types: teradataml DataFrame
            
            scale_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the ScaleFit() function.
                Types: teradataml DataFrame
            
            simpleimpute_fit_data:
                Optional Argument.
                Specifies the teradataml DataFrame generated by the SimpleImputeFit() function.
                Types: teradataml DataFrame
            
            fillrowid_column_name:
                Optional Argument.
                Specifies the name for the output column in which unique identifiers for each row are
                populated.
                Types: str
            
            **generic_arguments:
                Specifies the generic keyword arguments SQLE functions accept. Below 
                are the generic keyword arguments:
                    persist:
                        Optional Argument.
                        Specifies whether to persist the results of the 
                        function in a table or not. When set to True,
                        results are persisted in a table; otherwise,
                        results are garbage collected at the end of the 
                        session.
                        Default Value: False
                        Types: bool
                    
                    volatile:
                        Optional Argument.
                        Specifies whether to put the results of the 
                        function in a volatile table or not. When set to
                        True, results are stored in a volatile table,
                        otherwise not.
                        Default Value: False
                        Types: bool
                     
                Function allows the user to partition, hash, order or local 
                order the input data. These generic arguments are available 
                for each argument that accepts teradataml DataFrame as 
                input and can be accessed as:    
                    * "<input_data_arg_name>_partition_column" accepts str or 
                      list of str (Strings)
                    * "<input_data_arg_name>_hash_column" accepts str or list 
                      of str (Strings)
                    * "<input_data_arg_name>_order_column" accepts str or list 
                      of str (Strings)
                    * "local_order_<input_data_arg_name>" accepts boolean
                Note:
                    These generic arguments are supported by teradataml if 
                    the underlying SQLE Engine function supports, else an 
                    exception is raised.
        
        RETURNS:
            Instance of ColumnTransformer.
            Output teradataml DataFrames can be accessed using attribute 
            references, such as ColumnTransformerObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
        
        
        RAISES:
            TeradataMlException, TypeError, ValueError
        
        
        EXAMPLES:
            # Notes:
            #     1. Get the connection to Vantage, before importing the 
            #        function in user space.
            #     2. User can import the function, if it is available on 
            #        the Vantage user is connected to.
            #     3. To check the list of analytic functions available on 
            #        the Vantage user connected to, use 
            #        "display_analytic_functions()".
            
            # Load the example data.
            load_example_data("teradataml", ["titanic"])
            
            # Create teradataml DataFrame objects.
            titanic = DataFrame.from_table("titanic")
            
            # Check the list of available analytic functions.
            display_analytic_functions()
            
            # Import function ColumnTransformer.
            from teradataml import ColumnTransformer

            # Example 1: Perform Bincode transformation and OneHotEncoding transformation using fit functions and
                         ColumnTransformer() function.

            from teradataml import BincodeFit
            from teradataml import OneHotEncodingFit
            bin_code = BincodeFit(data=titanic,
                                  target_columns='age',
                                  method_type='Equal-Width',
                                  nbins=2,
                                  label_prefix='label_prefix')

            one_hot_encoding = OneHotEncodingFit(data=titanic,
                                                 is_input_dense=True,
                                                 target_column="sex",
                                                 categorical_values=["male", "female"],
                                                 other_column="other")

            ColumnTransformer_out = ColumnTransformer(fillrowid_column_name="output_value",
                                                      input_data=titanic,
                                                      bincode_fit_data=bin_code.output,
                                                      onehotencoding_fit_data=one_hot_encoding.result)

            # Print the result DataFrame.
            print(ColumnTransformer_out.result)
        
        """