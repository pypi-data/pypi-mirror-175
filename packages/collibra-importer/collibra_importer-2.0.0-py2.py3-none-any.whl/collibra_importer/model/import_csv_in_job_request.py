# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class ImportCsvInJobRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request defining import call properties from a CSV file.
    """


    class MetaOapg:
        required = {
            "template",
            "quote",
            "escape",
            "separator",
        }
        
        class properties:
            separator = schemas.StrSchema
            quote = schemas.StrSchema
            escape = schemas.StrSchema
            template = schemas.StrSchema
            sendNotification = schemas.BoolSchema
            
            
            class batchSize(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 1
            simulation = schemas.BoolSchema
            saveResult = schemas.BoolSchema
            fileId = schemas.UUIDSchema
            file = schemas.BinarySchema
            fileName = schemas.StrSchema
            deleteFile = schemas.BoolSchema
            continueOnError = schemas.BoolSchema
            strictQuotes = schemas.BoolSchema
            ignoreLeadingWhitespace = schemas.BoolSchema
            headerRow = schemas.BoolSchema
            __annotations__ = {
                "separator": separator,
                "quote": quote,
                "escape": escape,
                "template": template,
                "sendNotification": sendNotification,
                "batchSize": batchSize,
                "simulation": simulation,
                "saveResult": saveResult,
                "fileId": fileId,
                "file": file,
                "fileName": fileName,
                "deleteFile": deleteFile,
                "continueOnError": continueOnError,
                "strictQuotes": strictQuotes,
                "ignoreLeadingWhitespace": ignoreLeadingWhitespace,
                "headerRow": headerRow,
            }
    
    template: MetaOapg.properties.template
    quote: MetaOapg.properties.quote
    escape: MetaOapg.properties.escape
    separator: MetaOapg.properties.separator
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["separator"]) -> MetaOapg.properties.separator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote"]) -> MetaOapg.properties.quote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["escape"]) -> MetaOapg.properties.escape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendNotification"]) -> MetaOapg.properties.sendNotification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchSize"]) -> MetaOapg.properties.batchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simulation"]) -> MetaOapg.properties.simulation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveResult"]) -> MetaOapg.properties.saveResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileId"]) -> MetaOapg.properties.fileId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteFile"]) -> MetaOapg.properties.deleteFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continueOnError"]) -> MetaOapg.properties.continueOnError: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strictQuotes"]) -> MetaOapg.properties.strictQuotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignoreLeadingWhitespace"]) -> MetaOapg.properties.ignoreLeadingWhitespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headerRow"]) -> MetaOapg.properties.headerRow: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["separator", "quote", "escape", "template", "sendNotification", "batchSize", "simulation", "saveResult", "fileId", "file", "fileName", "deleteFile", "continueOnError", "strictQuotes", "ignoreLeadingWhitespace", "headerRow", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["separator"]) -> MetaOapg.properties.separator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote"]) -> MetaOapg.properties.quote: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["escape"]) -> MetaOapg.properties.escape: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendNotification"]) -> typing.Union[MetaOapg.properties.sendNotification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchSize"]) -> typing.Union[MetaOapg.properties.batchSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simulation"]) -> typing.Union[MetaOapg.properties.simulation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveResult"]) -> typing.Union[MetaOapg.properties.saveResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileId"]) -> typing.Union[MetaOapg.properties.fileId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteFile"]) -> typing.Union[MetaOapg.properties.deleteFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continueOnError"]) -> typing.Union[MetaOapg.properties.continueOnError, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strictQuotes"]) -> typing.Union[MetaOapg.properties.strictQuotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignoreLeadingWhitespace"]) -> typing.Union[MetaOapg.properties.ignoreLeadingWhitespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headerRow"]) -> typing.Union[MetaOapg.properties.headerRow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["separator", "quote", "escape", "template", "sendNotification", "batchSize", "simulation", "saveResult", "fileId", "file", "fileName", "deleteFile", "continueOnError", "strictQuotes", "ignoreLeadingWhitespace", "headerRow", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        template: typing.Union[MetaOapg.properties.template, str, ],
        quote: typing.Union[MetaOapg.properties.quote, str, ],
        escape: typing.Union[MetaOapg.properties.escape, str, ],
        separator: typing.Union[MetaOapg.properties.separator, str, ],
        sendNotification: typing.Union[MetaOapg.properties.sendNotification, bool, schemas.Unset] = schemas.unset,
        batchSize: typing.Union[MetaOapg.properties.batchSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        simulation: typing.Union[MetaOapg.properties.simulation, bool, schemas.Unset] = schemas.unset,
        saveResult: typing.Union[MetaOapg.properties.saveResult, bool, schemas.Unset] = schemas.unset,
        fileId: typing.Union[MetaOapg.properties.fileId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        file: typing.Union[MetaOapg.properties.file, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        deleteFile: typing.Union[MetaOapg.properties.deleteFile, bool, schemas.Unset] = schemas.unset,
        continueOnError: typing.Union[MetaOapg.properties.continueOnError, bool, schemas.Unset] = schemas.unset,
        strictQuotes: typing.Union[MetaOapg.properties.strictQuotes, bool, schemas.Unset] = schemas.unset,
        ignoreLeadingWhitespace: typing.Union[MetaOapg.properties.ignoreLeadingWhitespace, bool, schemas.Unset] = schemas.unset,
        headerRow: typing.Union[MetaOapg.properties.headerRow, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportCsvInJobRequest':
        return super().__new__(
            cls,
            *args,
            template=template,
            quote=quote,
            escape=escape,
            separator=separator,
            sendNotification=sendNotification,
            batchSize=batchSize,
            simulation=simulation,
            saveResult=saveResult,
            fileId=fileId,
            file=file,
            fileName=fileName,
            deleteFile=deleteFile,
            continueOnError=continueOnError,
            strictQuotes=strictQuotes,
            ignoreLeadingWhitespace=ignoreLeadingWhitespace,
            headerRow=headerRow,
            _configuration=_configuration,
            **kwargs,
        )
