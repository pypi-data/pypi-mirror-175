# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class ImportError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Import job error.
    """


    class MetaOapg:
        
        class properties:
            
            
            class errorType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VALIDATION": "VALIDATION",
                        "RUNTIME": "RUNTIME",
                    }
                
                @schemas.classproperty
                def VALIDATION(cls):
                    return cls("VALIDATION")
                
                @schemas.classproperty
                def RUNTIME(cls):
                    return cls("RUNTIME")
            
            
            class resourceType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "COMMUNITY": "COMMUNITY",
                        "DOMAIN": "DOMAIN",
                        "ASSET": "ASSET",
                        "ATTRIBUTE": "ATTRIBUTE",
                        "RELATION": "RELATION",
                        "COMPLEX_RELATION": "COMPLEX_RELATION",
                        "MAPPING": "MAPPING",
                        "RESPONSIBILITY": "RESPONSIBILITY",
                    }
                
                @schemas.classproperty
                def COMMUNITY(cls):
                    return cls("COMMUNITY")
                
                @schemas.classproperty
                def DOMAIN(cls):
                    return cls("DOMAIN")
                
                @schemas.classproperty
                def ASSET(cls):
                    return cls("ASSET")
                
                @schemas.classproperty
                def ATTRIBUTE(cls):
                    return cls("ATTRIBUTE")
                
                @schemas.classproperty
                def RELATION(cls):
                    return cls("RELATION")
                
                @schemas.classproperty
                def COMPLEX_RELATION(cls):
                    return cls("COMPLEX_RELATION")
                
                @schemas.classproperty
                def MAPPING(cls):
                    return cls("MAPPING")
                
                @schemas.classproperty
                def RESPONSIBILITY(cls):
                    return cls("RESPONSIBILITY")
            errorMessage = schemas.StrSchema
        
            @staticmethod
            def command() -> typing.Type['ImportCommandReference']:
                return ImportCommandReference
            __annotations__ = {
                "errorType": errorType,
                "resourceType": resourceType,
                "errorMessage": errorMessage,
                "command": command,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorType"]) -> MetaOapg.properties.errorType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["command"]) -> 'ImportCommandReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorType", "resourceType", "errorMessage", "command", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorType"]) -> typing.Union[MetaOapg.properties.errorType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceType"]) -> typing.Union[MetaOapg.properties.resourceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessage"]) -> typing.Union[MetaOapg.properties.errorMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["command"]) -> typing.Union['ImportCommandReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorType", "resourceType", "errorMessage", "command", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        errorType: typing.Union[MetaOapg.properties.errorType, str, schemas.Unset] = schemas.unset,
        resourceType: typing.Union[MetaOapg.properties.resourceType, str, schemas.Unset] = schemas.unset,
        errorMessage: typing.Union[MetaOapg.properties.errorMessage, str, schemas.Unset] = schemas.unset,
        command: typing.Union['ImportCommandReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportError':
        return super().__new__(
            cls,
            *args,
            errorType=errorType,
            resourceType=resourceType,
            errorMessage=errorMessage,
            command=command,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_importer.model.import_command_reference import ImportCommandReference
