# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class MappingIdentifier(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class indexes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'indexes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            externalSystemId = schemas.StrSchema
            externalEntityId = schemas.StrSchema
            dgcId = schemas.UUIDSchema
        
            @staticmethod
            def asset() -> typing.Type['AssetIdentifier']:
                return AssetIdentifier
        
            @staticmethod
            def domain() -> typing.Type['DomainIdentifier']:
                return DomainIdentifier
        
            @staticmethod
            def community() -> typing.Type['CommunityIdentifier']:
                return CommunityIdentifier
        
            @staticmethod
            def complexRelation() -> typing.Type['ComplexRelationIdentifier']:
                return ComplexRelationIdentifier
            __annotations__ = {
                "id": id,
                "indexes": indexes,
                "externalSystemId": externalSystemId,
                "externalEntityId": externalEntityId,
                "dgcId": dgcId,
                "asset": asset,
                "domain": domain,
                "community": community,
                "complexRelation": complexRelation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indexes"]) -> MetaOapg.properties.indexes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSystemId"]) -> MetaOapg.properties.externalSystemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalEntityId"]) -> MetaOapg.properties.externalEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dgcId"]) -> MetaOapg.properties.dgcId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset"]) -> 'AssetIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'DomainIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["community"]) -> 'CommunityIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complexRelation"]) -> 'ComplexRelationIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "indexes", "externalSystemId", "externalEntityId", "dgcId", "asset", "domain", "community", "complexRelation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indexes"]) -> typing.Union[MetaOapg.properties.indexes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSystemId"]) -> typing.Union[MetaOapg.properties.externalSystemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalEntityId"]) -> typing.Union[MetaOapg.properties.externalEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dgcId"]) -> typing.Union[MetaOapg.properties.dgcId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset"]) -> typing.Union['AssetIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['DomainIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["community"]) -> typing.Union['CommunityIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complexRelation"]) -> typing.Union['ComplexRelationIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "indexes", "externalSystemId", "externalEntityId", "dgcId", "asset", "domain", "community", "complexRelation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        indexes: typing.Union[MetaOapg.properties.indexes, list, tuple, schemas.Unset] = schemas.unset,
        externalSystemId: typing.Union[MetaOapg.properties.externalSystemId, str, schemas.Unset] = schemas.unset,
        externalEntityId: typing.Union[MetaOapg.properties.externalEntityId, str, schemas.Unset] = schemas.unset,
        dgcId: typing.Union[MetaOapg.properties.dgcId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        asset: typing.Union['AssetIdentifier', schemas.Unset] = schemas.unset,
        domain: typing.Union['DomainIdentifier', schemas.Unset] = schemas.unset,
        community: typing.Union['CommunityIdentifier', schemas.Unset] = schemas.unset,
        complexRelation: typing.Union['ComplexRelationIdentifier', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MappingIdentifier':
        return super().__new__(
            cls,
            *args,
            id=id,
            indexes=indexes,
            externalSystemId=externalSystemId,
            externalEntityId=externalEntityId,
            dgcId=dgcId,
            asset=asset,
            domain=domain,
            community=community,
            complexRelation=complexRelation,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_importer.model.asset_identifier import AssetIdentifier
from collibra_importer.model.community_identifier import CommunityIdentifier
from collibra_importer.model.complex_relation_identifier import ComplexRelationIdentifier
from collibra_importer.model.domain_identifier import DomainIdentifier
