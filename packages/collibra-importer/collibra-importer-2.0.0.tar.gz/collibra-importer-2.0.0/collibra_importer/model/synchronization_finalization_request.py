# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class SynchronizationFinalizationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request defining synchronization finalization call properties.
    """


    class MetaOapg:
        required = {
            "synchronizationId",
        }
        
        class properties:
            
            
            class synchronizationId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 1
            sendNotification = schemas.BoolSchema
            
            
            class batchSize(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 1
            simulation = schemas.BoolSchema
            saveResult = schemas.BoolSchema
            
            
            class finalizationStrategy(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'REMOVE_RESOURCES|CHANGE_STATUS|IGNORE',  # noqa: E501
                    }]
            missingAssetStatusId = schemas.UUIDSchema
            
            
            class finalizationParameters(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "STATUS_ID",
                    }
                    additional_properties = schemas.StrSchema
                
                STATUS_ID: MetaOapg.additional_properties
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["STATUS_ID"]) -> MetaOapg.additional_properties: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["STATUS_ID"], str, ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["STATUS_ID"]) -> MetaOapg.additional_properties: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["STATUS_ID"], str, ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    STATUS_ID: typing.Union[MetaOapg.additional_properties, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'finalizationParameters':
                    return super().__new__(
                        cls,
                        *args,
                        STATUS_ID=STATUS_ID,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "synchronizationId": synchronizationId,
                "sendNotification": sendNotification,
                "batchSize": batchSize,
                "simulation": simulation,
                "saveResult": saveResult,
                "finalizationStrategy": finalizationStrategy,
                "missingAssetStatusId": missingAssetStatusId,
                "finalizationParameters": finalizationParameters,
            }
    
    synchronizationId: MetaOapg.properties.synchronizationId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synchronizationId"]) -> MetaOapg.properties.synchronizationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendNotification"]) -> MetaOapg.properties.sendNotification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchSize"]) -> MetaOapg.properties.batchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simulation"]) -> MetaOapg.properties.simulation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveResult"]) -> MetaOapg.properties.saveResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalizationStrategy"]) -> MetaOapg.properties.finalizationStrategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missingAssetStatusId"]) -> MetaOapg.properties.missingAssetStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalizationParameters"]) -> MetaOapg.properties.finalizationParameters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["synchronizationId", "sendNotification", "batchSize", "simulation", "saveResult", "finalizationStrategy", "missingAssetStatusId", "finalizationParameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synchronizationId"]) -> MetaOapg.properties.synchronizationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendNotification"]) -> typing.Union[MetaOapg.properties.sendNotification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchSize"]) -> typing.Union[MetaOapg.properties.batchSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simulation"]) -> typing.Union[MetaOapg.properties.simulation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveResult"]) -> typing.Union[MetaOapg.properties.saveResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalizationStrategy"]) -> typing.Union[MetaOapg.properties.finalizationStrategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missingAssetStatusId"]) -> typing.Union[MetaOapg.properties.missingAssetStatusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalizationParameters"]) -> typing.Union[MetaOapg.properties.finalizationParameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["synchronizationId", "sendNotification", "batchSize", "simulation", "saveResult", "finalizationStrategy", "missingAssetStatusId", "finalizationParameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        synchronizationId: typing.Union[MetaOapg.properties.synchronizationId, str, ],
        sendNotification: typing.Union[MetaOapg.properties.sendNotification, bool, schemas.Unset] = schemas.unset,
        batchSize: typing.Union[MetaOapg.properties.batchSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        simulation: typing.Union[MetaOapg.properties.simulation, bool, schemas.Unset] = schemas.unset,
        saveResult: typing.Union[MetaOapg.properties.saveResult, bool, schemas.Unset] = schemas.unset,
        finalizationStrategy: typing.Union[MetaOapg.properties.finalizationStrategy, str, schemas.Unset] = schemas.unset,
        missingAssetStatusId: typing.Union[MetaOapg.properties.missingAssetStatusId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        finalizationParameters: typing.Union[MetaOapg.properties.finalizationParameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SynchronizationFinalizationRequest':
        return super().__new__(
            cls,
            *args,
            synchronizationId=synchronizationId,
            sendNotification=sendNotification,
            batchSize=batchSize,
            simulation=simulation,
            saveResult=saveResult,
            finalizationStrategy=finalizationStrategy,
            missingAssetStatusId=missingAssetStatusId,
            finalizationParameters=finalizationParameters,
            _configuration=_configuration,
            **kwargs,
        )
