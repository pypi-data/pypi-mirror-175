# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class SubcategorySummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A summary of the import for a particular type of resource, for example Physical Data Dictionary or Business Term.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def category() -> typing.Type['CategoryReference']:
                return CategoryReference
        
            @staticmethod
            def counters() -> typing.Type['ImportCounters']:
                return ImportCounters
            __annotations__ = {
                "category": category,
                "counters": counters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'CategoryReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["counters"]) -> 'ImportCounters': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category", "counters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['CategoryReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["counters"]) -> typing.Union['ImportCounters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category", "counters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        category: typing.Union['CategoryReference', schemas.Unset] = schemas.unset,
        counters: typing.Union['ImportCounters', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubcategorySummary':
        return super().__new__(
            cls,
            *args,
            category=category,
            counters=counters,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_importer.model.category_reference import CategoryReference
from collibra_importer.model.import_counters import ImportCounters
