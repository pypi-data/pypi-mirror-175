# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class ImportSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A summary of the import.
    """


    class MetaOapg:
        
        class properties:
            
            
            class resourceTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ResourceTypeSummary']:
                        return ResourceTypeSummary
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ResourceTypeSummary'], typing.List['ResourceTypeSummary']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resourceTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ResourceTypeSummary':
                    return super().__getitem__(i)
            errorsCount = schemas.Int32Schema
            
            
            class importJobState(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "COMPLETED": "COMPLETED",
                        "FAILED": "FAILED",
                        "COMPLETED_WITH_ERRORS": "COMPLETED_WITH_ERRORS",
                        "ABORTED": "ABORTED",
                    }
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def COMPLETED_WITH_ERRORS(cls):
                    return cls("COMPLETED_WITH_ERRORS")
                
                @schemas.classproperty
                def ABORTED(cls):
                    return cls("ABORTED")
            __annotations__ = {
                "resourceTypes": resourceTypes,
                "errorsCount": errorsCount,
                "importJobState": importJobState,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceTypes"]) -> MetaOapg.properties.resourceTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorsCount"]) -> MetaOapg.properties.errorsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importJobState"]) -> MetaOapg.properties.importJobState: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resourceTypes", "errorsCount", "importJobState", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceTypes"]) -> typing.Union[MetaOapg.properties.resourceTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorsCount"]) -> typing.Union[MetaOapg.properties.errorsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importJobState"]) -> typing.Union[MetaOapg.properties.importJobState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resourceTypes", "errorsCount", "importJobState", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        resourceTypes: typing.Union[MetaOapg.properties.resourceTypes, list, tuple, schemas.Unset] = schemas.unset,
        errorsCount: typing.Union[MetaOapg.properties.errorsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        importJobState: typing.Union[MetaOapg.properties.importJobState, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportSummary':
        return super().__new__(
            cls,
            *args,
            resourceTypes=resourceTypes,
            errorsCount=errorsCount,
            importJobState=importJobState,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_importer.model.resource_type_summary import ResourceTypeSummary
