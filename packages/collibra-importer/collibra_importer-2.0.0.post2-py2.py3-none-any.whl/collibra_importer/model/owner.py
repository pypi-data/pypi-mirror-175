# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_importer import schemas  # noqa: F401


class Owner(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def user() -> typing.Type['UserIdentifier']:
                return UserIdentifier
        
            @staticmethod
            def userGroup() -> typing.Type['UserGroupIdentifier']:
                return UserGroupIdentifier
            __annotations__ = {
                "user": user,
                "userGroup": userGroup,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroup"]) -> 'UserGroupIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", "userGroup", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['UserIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroup"]) -> typing.Union['UserGroupIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", "userGroup", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user: typing.Union['UserIdentifier', schemas.Unset] = schemas.unset,
        userGroup: typing.Union['UserGroupIdentifier', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Owner':
        return super().__new__(
            cls,
            *args,
            user=user,
            userGroup=userGroup,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_importer.model.user_group_identifier import UserGroupIdentifier
from collibra_importer.model.user_identifier import UserIdentifier
