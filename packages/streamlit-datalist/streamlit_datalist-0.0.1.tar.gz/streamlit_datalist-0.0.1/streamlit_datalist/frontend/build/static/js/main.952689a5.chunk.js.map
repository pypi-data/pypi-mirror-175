{"version":3,"sources":["streamlit_datalist.tsx","index.tsx"],"names":["StreamlitDatalist","state","selection","isFocused","render","options","props","args","label","options_html","option","push","value","theme","styleLabel","styleInput","width","fontSize","lineHeight","transform","fontFamily","font","marginBottom","height","minHeight","verticalAlign","backgroundColor","secondaryBackgroundColor","color","textColor","padding","borderRadius","border","borderColor","textIndent","fontWeight","primaryColor","outline","style","list","name","id","onChange","evt","updateInputValue","onFocus","_onFocus","onBlur","_onBlur","className","setState","val","target","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"oPAOMA,EAAiB,iKA2FpB,OA3FoB,oCACdC,MAAQ,CAAEC,UAAW,KAAMC,WAAW,GAAO,EAE7CC,OAAS,WACd,IAI0B,EAJpBC,EAAU,EAAKC,MAAMC,KAAc,QACnCC,EAAQ,EAAKF,MAAMC,KAAY,MAC/BE,EAAe,GAAE,cAEJJ,GAAO,IAA1B,2BAA2B,CAAC,IAAnBK,EAAM,QACbD,EAAaE,KAAK,4BAAQC,MAAOF,MAClC,8BAED,IAAQG,EAAU,EAAKP,MAAfO,MACFC,EAAkC,GAClCC,EAAkC,GA2CxC,OA/BAD,EAAWE,MAAQ,OACnBF,EAAWG,SAAW,OACtBH,EAAWI,WAAa,MACxBJ,EAAWK,UAAY,gBACvBL,EAAWM,WAAkB,OAALP,QAAK,IAALA,OAAK,EAALA,EAAOQ,KAC/BP,EAAWQ,aAAe,SAC1BR,EAAWS,OAAS,OACpBT,EAAWU,UAAY,SACvBV,EAAWW,cAAgB,SAE3BV,EAAWC,MAAQ,OACnBD,EAAWW,gBAAuB,OAALb,QAAK,IAALA,OAAK,EAALA,EAAOc,yBACpCZ,EAAWa,MAAa,OAALf,QAAK,IAALA,OAAK,EAALA,EAAOgB,UAC1Bd,EAAWe,QAAU,MACrBf,EAAWG,WAAa,MACxBH,EAAWgB,aAAe,UAC1BhB,EAAWE,SAAW,OACtBF,EAAWiB,OAAS,YACpBjB,EAAWkB,YAAc,eACzBlB,EAAWmB,WAAa,MACxBnB,EAAWoB,WAAa,SAMpB,EAAKlC,MAAME,YACbY,EAAWkB,YAAmB,OAALpB,QAAK,IAALA,OAAK,EAALA,EAAOuB,aAChCrB,EAAWsB,QAAU,OAIrB,8BACE,2BAAOC,MAASxB,GAAW,IAAGN,EAAK,IAAE,6BAAK,KAC1C,2BAAO8B,MAASvB,EACVwB,KAAK,oBACLC,KAAK,WACLC,GAAG,WACHC,SAAU,SAAAC,GAAG,OAAI,EAAKC,iBAAiBD,IACvCE,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UAGnB,8BAAUP,GAAG,oBAAoBQ,UAAU,UACxCxC,KAKR,EASOqC,SAAW,WACjB,EAAKI,SAAS,CAAE/C,WAAW,KAC5B,EAGO6C,QAAU,WAChB,EAAKE,SAAS,CAAE/C,WAAW,KAC5B,EARD,OAQC,6CAdD,SAAyBwC,GACvB,IAAMQ,EAAMR,EAAIS,OAAOxC,MAEvByC,IAAUC,kBAAkBH,OAG9B,EAnFqB,CAASI,KA+FjBC,cAAwBxD,GClGvCyD,IAASrD,OACP,kBAAC,IAAMsD,WAAU,KACf,kBAAC,EAAiB,OAEpBC,SAASC,eAAe,W","file":"static/js/main.952689a5.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nclass StreamlitDatalist extends StreamlitComponentBase {\n  public state = { selection: null, isFocused: false }\n\n  public render = (): ReactNode => {\n    const options = this.props.args[\"options\"]\n    const label = this.props.args[\"label\"]\n    const options_html = []\n\n    for (let option of options){\n      options_html.push(<option value={option}/>);\n    }\n\n    const { theme } = this.props\n    const styleLabel: React.CSSProperties = {}\n    const styleInput: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    // if (theme) {\n    //   const borderStyling = `0px solid ${\n    //     this.state.isFocused ? theme.primaryColor : \"gray\"\n    //   }`\n    //   style.border = borderStyling\n    //   style.outline = borderStyling\n    // }\n\n    styleLabel.width = '100%'\n    styleLabel.fontSize = '14px'\n    styleLabel.lineHeight = '1.6'\n    styleLabel.transform = 'scale(1,0.95)'\n    styleLabel.fontFamily = theme?.font\n    styleLabel.marginBottom = '0.5rem'\n    styleLabel.height = 'auto'\n    styleLabel.minHeight = '1.5rem'\n    styleLabel.verticalAlign = 'middle'\n\n    styleInput.width = '100%'\n    styleInput.backgroundColor = theme?.secondaryBackgroundColor\n    styleInput.color = theme?.textColor\n    styleInput.padding = \"8px\"\n    styleInput.lineHeight = '1.4'\n    styleInput.borderRadius = \"0.25rem\"\n    styleInput.fontSize = '16px'\n    styleInput.border = \"1px solid\"\n    styleInput.borderColor = \"rgb(0,0,0,0)\"\n    styleInput.textIndent = \"2px\"\n    styleInput.fontWeight = \"normal\"\n\n    // if (theme?.base === 'light') {\n    //   styleInput.color = \"rgb(49, 51, 63)\"\n    // }\n\n    if (this.state.isFocused) {\n      styleInput.borderColor = theme?.primaryColor\n      styleInput.outline = '0px'\n    }\n\n    return (\n      <span>\n        <label style = {styleLabel}> {label} <br/> </label>\n        <input style = {styleInput}\n              list=\"datalist-datalist\" \n              name=\"datalist\" \n              id=\"datalist\" \n              onChange={evt => this.updateInputValue(evt)}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n              />\n        \n        <datalist id=\"datalist-datalist\" className='rowWid'>\n          {options_html}\n        </datalist>\n\n      </span>\n    )\n  }\n\n  private updateInputValue(evt:any) {\n    const val = evt.target.value;\n    // this.setState({ selection: val })\n    Streamlit.setComponentValue(val) \n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n}\n\nexport default withStreamlitConnection(StreamlitDatalist)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitDatalist from \"./streamlit_datalist\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitDatalist />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}