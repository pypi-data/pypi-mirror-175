# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class ChangeAssetTypeAssignmentRuleRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Parameters for the assignment rule to be changed.
    """


    class MetaOapg:
        required = {
            "assetTypeId",
        }
        
        class properties:
            assetTypeId = schemas.UUIDSchema
            domainId = schemas.UUIDSchema
            communityId = schemas.UUIDSchema
            statusId = schemas.UUIDSchema
            __annotations__ = {
                "assetTypeId": assetTypeId,
                "domainId": domainId,
                "communityId": communityId,
                "statusId": statusId,
            }
    
    assetTypeId: MetaOapg.properties.assetTypeId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetTypeId"]) -> MetaOapg.properties.assetTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainId"]) -> MetaOapg.properties.domainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["communityId"]) -> MetaOapg.properties.communityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> MetaOapg.properties.statusId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetTypeId", "domainId", "communityId", "statusId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetTypeId"]) -> MetaOapg.properties.assetTypeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainId"]) -> typing.Union[MetaOapg.properties.domainId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["communityId"]) -> typing.Union[MetaOapg.properties.communityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union[MetaOapg.properties.statusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetTypeId", "domainId", "communityId", "statusId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assetTypeId: typing.Union[MetaOapg.properties.assetTypeId, str, uuid.UUID, ],
        domainId: typing.Union[MetaOapg.properties.domainId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        communityId: typing.Union[MetaOapg.properties.communityId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        statusId: typing.Union[MetaOapg.properties.statusId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangeAssetTypeAssignmentRuleRequest':
        return super().__new__(
            cls,
            *args,
            assetTypeId=assetTypeId,
            domainId=domainId,
            communityId=communityId,
            statusId=statusId,
            _configuration=_configuration,
            **kwargs,
        )
