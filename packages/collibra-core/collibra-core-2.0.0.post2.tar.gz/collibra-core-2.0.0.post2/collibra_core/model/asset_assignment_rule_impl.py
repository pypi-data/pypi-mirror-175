# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class AssetAssignmentRuleImpl(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An assignment rule for workflow definitions which apply to assets. Is used to limit the scope of assets to which given workflow definition applies to.
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def assetType() -> typing.Type['NamedResourceReferenceImpl']:
                return NamedResourceReferenceImpl
        
            @staticmethod
            def domain() -> typing.Type['NamedResourceReferenceImpl']:
                return NamedResourceReferenceImpl
        
            @staticmethod
            def community() -> typing.Type['NamedResourceReferenceImpl']:
                return NamedResourceReferenceImpl
        
            @staticmethod
            def status() -> typing.Type['NamedResourceReferenceImpl']:
                return NamedResourceReferenceImpl
            __annotations__ = {
                "id": id,
                "assetType": assetType,
                "domain": domain,
                "community": community,
                "status": status,
            }
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetType"]) -> 'NamedResourceReferenceImpl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'NamedResourceReferenceImpl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["community"]) -> 'NamedResourceReferenceImpl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'NamedResourceReferenceImpl': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "assetType", "domain", "community", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetType"]) -> typing.Union['NamedResourceReferenceImpl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['NamedResourceReferenceImpl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["community"]) -> typing.Union['NamedResourceReferenceImpl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['NamedResourceReferenceImpl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "assetType", "domain", "community", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        assetType: typing.Union['NamedResourceReferenceImpl', schemas.Unset] = schemas.unset,
        domain: typing.Union['NamedResourceReferenceImpl', schemas.Unset] = schemas.unset,
        community: typing.Union['NamedResourceReferenceImpl', schemas.Unset] = schemas.unset,
        status: typing.Union['NamedResourceReferenceImpl', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetAssignmentRuleImpl':
        return super().__new__(
            cls,
            *args,
            id=id,
            assetType=assetType,
            domain=domain,
            community=community,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_core.model.named_resource_reference_impl import NamedResourceReferenceImpl
