# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class ChangeDataQualityRuleRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            categorizationRelationTypeId = schemas.UUIDSchema
            
            
            class dataQualityMetrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataQualityMetricRequest']:
                        return DataQualityMetricRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DataQualityMetricRequest'], typing.List['DataQualityMetricRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataQualityMetrics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataQualityMetricRequest':
                    return super().__getitem__(i)
            
            
            class relationTraceEntries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RelationTraceEntryRequest']:
                        return RelationTraceEntryRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RelationTraceEntryRequest'], typing.List['RelationTraceEntryRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relationTraceEntries':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RelationTraceEntryRequest':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "description": description,
                "categorizationRelationTypeId": categorizationRelationTypeId,
                "dataQualityMetrics": dataQualityMetrics,
                "relationTraceEntries": relationTraceEntries,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categorizationRelationTypeId"]) -> MetaOapg.properties.categorizationRelationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataQualityMetrics"]) -> MetaOapg.properties.dataQualityMetrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationTraceEntries"]) -> MetaOapg.properties.relationTraceEntries: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "categorizationRelationTypeId", "dataQualityMetrics", "relationTraceEntries", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categorizationRelationTypeId"]) -> typing.Union[MetaOapg.properties.categorizationRelationTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataQualityMetrics"]) -> typing.Union[MetaOapg.properties.dataQualityMetrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationTraceEntries"]) -> typing.Union[MetaOapg.properties.relationTraceEntries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "categorizationRelationTypeId", "dataQualityMetrics", "relationTraceEntries", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        categorizationRelationTypeId: typing.Union[MetaOapg.properties.categorizationRelationTypeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        dataQualityMetrics: typing.Union[MetaOapg.properties.dataQualityMetrics, list, tuple, schemas.Unset] = schemas.unset,
        relationTraceEntries: typing.Union[MetaOapg.properties.relationTraceEntries, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangeDataQualityRuleRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            categorizationRelationTypeId=categorizationRelationTypeId,
            dataQualityMetrics=dataQualityMetrics,
            relationTraceEntries=relationTraceEntries,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_core.model.data_quality_metric_request import DataQualityMetricRequest
from collibra_core.model.relation_trace_entry_request import RelationTraceEntryRequest
