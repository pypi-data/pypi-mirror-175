# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class ChangeAssignmentRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class statusIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class characteristicTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CharacteristicTypeAssignmentReference']:
                        return CharacteristicTypeAssignmentReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CharacteristicTypeAssignmentReference'], typing.List['CharacteristicTypeAssignmentReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'characteristicTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CharacteristicTypeAssignmentReference':
                    return super().__getitem__(i)
            
            
            class articulationRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ArticulationRuleRequest']:
                        return ArticulationRuleRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ArticulationRuleRequest'], typing.List['ArticulationRuleRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'articulationRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ArticulationRuleRequest':
                    return super().__getitem__(i)
            
            
            class validationRuleIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validationRuleIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class dataQualityRuleIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataQualityRuleIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class domainTypeIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domainTypeIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            defaultStatusId = schemas.UUIDSchema
            scopeId = schemas.UUIDSchema
            __annotations__ = {
                "statusIds": statusIds,
                "characteristicTypes": characteristicTypes,
                "articulationRules": articulationRules,
                "validationRuleIds": validationRuleIds,
                "dataQualityRuleIds": dataQualityRuleIds,
                "domainTypeIds": domainTypeIds,
                "defaultStatusId": defaultStatusId,
                "scopeId": scopeId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusIds"]) -> MetaOapg.properties.statusIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characteristicTypes"]) -> MetaOapg.properties.characteristicTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["articulationRules"]) -> MetaOapg.properties.articulationRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationRuleIds"]) -> MetaOapg.properties.validationRuleIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataQualityRuleIds"]) -> MetaOapg.properties.dataQualityRuleIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainTypeIds"]) -> MetaOapg.properties.domainTypeIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultStatusId"]) -> MetaOapg.properties.defaultStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopeId"]) -> MetaOapg.properties.scopeId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["statusIds", "characteristicTypes", "articulationRules", "validationRuleIds", "dataQualityRuleIds", "domainTypeIds", "defaultStatusId", "scopeId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusIds"]) -> typing.Union[MetaOapg.properties.statusIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characteristicTypes"]) -> typing.Union[MetaOapg.properties.characteristicTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["articulationRules"]) -> typing.Union[MetaOapg.properties.articulationRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationRuleIds"]) -> typing.Union[MetaOapg.properties.validationRuleIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataQualityRuleIds"]) -> typing.Union[MetaOapg.properties.dataQualityRuleIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainTypeIds"]) -> typing.Union[MetaOapg.properties.domainTypeIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultStatusId"]) -> typing.Union[MetaOapg.properties.defaultStatusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopeId"]) -> typing.Union[MetaOapg.properties.scopeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statusIds", "characteristicTypes", "articulationRules", "validationRuleIds", "dataQualityRuleIds", "domainTypeIds", "defaultStatusId", "scopeId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        statusIds: typing.Union[MetaOapg.properties.statusIds, list, tuple, schemas.Unset] = schemas.unset,
        characteristicTypes: typing.Union[MetaOapg.properties.characteristicTypes, list, tuple, schemas.Unset] = schemas.unset,
        articulationRules: typing.Union[MetaOapg.properties.articulationRules, list, tuple, schemas.Unset] = schemas.unset,
        validationRuleIds: typing.Union[MetaOapg.properties.validationRuleIds, list, tuple, schemas.Unset] = schemas.unset,
        dataQualityRuleIds: typing.Union[MetaOapg.properties.dataQualityRuleIds, list, tuple, schemas.Unset] = schemas.unset,
        domainTypeIds: typing.Union[MetaOapg.properties.domainTypeIds, list, tuple, schemas.Unset] = schemas.unset,
        defaultStatusId: typing.Union[MetaOapg.properties.defaultStatusId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        scopeId: typing.Union[MetaOapg.properties.scopeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangeAssignmentRequest':
        return super().__new__(
            cls,
            *args,
            statusIds=statusIds,
            characteristicTypes=characteristicTypes,
            articulationRules=articulationRules,
            validationRuleIds=validationRuleIds,
            dataQualityRuleIds=dataQualityRuleIds,
            domainTypeIds=domainTypeIds,
            defaultStatusId=defaultStatusId,
            scopeId=scopeId,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_core.model.articulation_rule_request import ArticulationRuleRequest
from collibra_core.model.characteristic_type_assignment_reference import CharacteristicTypeAssignmentReference
