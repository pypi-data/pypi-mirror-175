# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class AssignedRelationType(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "id",
            "assignedResourceType",
        }
        
        @staticmethod
        def discriminator():
            return {
                'assignedResourceType': {
                    'AttributeType': AssignedAttributeType,
                    'ComplexRelationType': AssignedComplexRelationType,
                    'RelationType': AssignedRelationType,
                }
            }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class roleDirection(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "TO_SOURCE": "TO_SOURCE",
                                "TO_TARGET": "TO_TARGET",
                                "BOTH": "BOTH",
                                "NONE": "NONE",
                            }
                        
                        @schemas.classproperty
                        def TO_SOURCE(cls):
                            return cls("TO_SOURCE")
                        
                        @schemas.classproperty
                        def TO_TARGET(cls):
                            return cls("TO_TARGET")
                        
                        @schemas.classproperty
                        def BOTH(cls):
                            return cls("BOTH")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                
                    @staticmethod
                    def relationType() -> typing.Type['RelationTypeImpl']:
                        return RelationTypeImpl
                
                    @staticmethod
                    def restriction() -> typing.Type['NamedResourceReferenceImpl']:
                        return NamedResourceReferenceImpl
                    __annotations__ = {
                        "roleDirection": roleDirection,
                        "relationType": relationType,
                        "restriction": restriction,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["roleDirection"]) -> MetaOapg.properties.roleDirection: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["relationType"]) -> 'RelationTypeImpl': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["restriction"]) -> 'NamedResourceReferenceImpl': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["roleDirection", "relationType", "restriction", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["roleDirection"]) -> typing.Union[MetaOapg.properties.roleDirection, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["relationType"]) -> typing.Union['RelationTypeImpl', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["restriction"]) -> typing.Union['NamedResourceReferenceImpl', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["roleDirection", "relationType", "restriction", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                roleDirection: typing.Union[MetaOapg.properties.roleDirection, str, schemas.Unset] = schemas.unset,
                relationType: typing.Union['RelationTypeImpl', schemas.Unset] = schemas.unset,
                restriction: typing.Union['NamedResourceReferenceImpl', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    roleDirection=roleDirection,
                    relationType=relationType,
                    restriction=restriction,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AssignedCharacteristicType,
                cls.all_of_1,
            ]

    
    id: schemas.AnyTypeSchema
    assignedResourceType: schemas.AnyTypeSchema

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssignedRelationType':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_core.model.assigned_attribute_type import AssignedAttributeType
from collibra_core.model.assigned_characteristic_type import AssignedCharacteristicType
from collibra_core.model.assigned_complex_relation_type import AssignedComplexRelationType
from collibra_core.model.assigned_relation_type import AssignedRelationType
from collibra_core.model.named_resource_reference_impl import NamedResourceReferenceImpl
from collibra_core.model.relation_type_impl import RelationTypeImpl
