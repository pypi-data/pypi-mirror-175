# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class StartFormDataImpl(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            formKey = schemas.StrSchema
            
            
            class formProperties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FormProperty']:
                        return FormProperty
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FormProperty'], typing.List['FormProperty']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formProperties':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FormProperty':
                    return super().__getitem__(i)
            processId = schemas.StrSchema
            __annotations__ = {
                "formKey": formKey,
                "formProperties": formProperties,
                "processId": processId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formKey"]) -> MetaOapg.properties.formKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formProperties"]) -> MetaOapg.properties.formProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processId"]) -> MetaOapg.properties.processId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["formKey", "formProperties", "processId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formKey"]) -> typing.Union[MetaOapg.properties.formKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formProperties"]) -> typing.Union[MetaOapg.properties.formProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processId"]) -> typing.Union[MetaOapg.properties.processId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formKey", "formProperties", "processId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formKey: typing.Union[MetaOapg.properties.formKey, str, schemas.Unset] = schemas.unset,
        formProperties: typing.Union[MetaOapg.properties.formProperties, list, tuple, schemas.Unset] = schemas.unset,
        processId: typing.Union[MetaOapg.properties.processId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StartFormDataImpl':
        return super().__new__(
            cls,
            *args,
            formKey=formKey,
            formProperties=formProperties,
            processId=processId,
            _configuration=_configuration,
            **kwargs,
        )

from collibra_core.model.form_property import FormProperty
