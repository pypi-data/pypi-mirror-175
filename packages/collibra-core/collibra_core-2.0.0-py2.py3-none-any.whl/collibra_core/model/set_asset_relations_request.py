# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class SetAssetRelationsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "relationDirection",
            "typeId",
            "relatedAssetIds",
        }
        
        class properties:
            typeId = schemas.UUIDSchema
            
            
            class relatedAssetIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relatedAssetIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class relationDirection(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TO_TARGET": "TARGET",
                        "TO_SOURCE": "SOURCE",
                    }
                
                @schemas.classproperty
                def TARGET(cls):
                    return cls("TO_TARGET")
                
                @schemas.classproperty
                def SOURCE(cls):
                    return cls("TO_SOURCE")
            __annotations__ = {
                "typeId": typeId,
                "relatedAssetIds": relatedAssetIds,
                "relationDirection": relationDirection,
            }
    
    relationDirection: MetaOapg.properties.relationDirection
    typeId: MetaOapg.properties.typeId
    relatedAssetIds: MetaOapg.properties.relatedAssetIds
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeId"]) -> MetaOapg.properties.typeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedAssetIds"]) -> MetaOapg.properties.relatedAssetIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationDirection"]) -> MetaOapg.properties.relationDirection: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeId", "relatedAssetIds", "relationDirection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeId"]) -> MetaOapg.properties.typeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedAssetIds"]) -> MetaOapg.properties.relatedAssetIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationDirection"]) -> MetaOapg.properties.relationDirection: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeId", "relatedAssetIds", "relationDirection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        relationDirection: typing.Union[MetaOapg.properties.relationDirection, str, ],
        typeId: typing.Union[MetaOapg.properties.typeId, str, uuid.UUID, ],
        relatedAssetIds: typing.Union[MetaOapg.properties.relatedAssetIds, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SetAssetRelationsRequest':
        return super().__new__(
            cls,
            *args,
            relationDirection=relationDirection,
            typeId=typeId,
            relatedAssetIds=relatedAssetIds,
            _configuration=_configuration,
            **kwargs,
        )
