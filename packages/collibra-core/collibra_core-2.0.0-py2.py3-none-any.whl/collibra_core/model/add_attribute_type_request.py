# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class AddAttributeTypeRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "kind",
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
            
            
            class kind(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BOOLEAN": "BOOLEAN",
                        "STRING": "STRING",
                        "NUMERIC": "NUMERIC",
                        "DATE": "DATE",
                        "SINGLE_VALUE_LIST": "SINGLE_VALUE_LIST",
                        "MULTI_VALUE_LIST": "MULTI_VALUE_LIST",
                        "SCRIPT": "SCRIPT",
                    }
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def NUMERIC(cls):
                    return cls("NUMERIC")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def SINGLE_VALUE_LIST(cls):
                    return cls("SINGLE_VALUE_LIST")
                
                @schemas.classproperty
                def MULTI_VALUE_LIST(cls):
                    return cls("MULTI_VALUE_LIST")
                
                @schemas.classproperty
                def SCRIPT(cls):
                    return cls("SCRIPT")
            id = schemas.UUIDSchema
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4000
                    min_length = 0
            
            
            class language(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            statisticsEnabled = schemas.BoolSchema
            
            
            class allowedValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedValues':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class stringType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RICH_TEXT": "RICH_TEXT",
                        "PLAIN_TEXT": "PLAIN_TEXT",
                    }
                
                @schemas.classproperty
                def RICH_TEXT(cls):
                    return cls("RICH_TEXT")
                
                @schemas.classproperty
                def PLAIN_TEXT(cls):
                    return cls("PLAIN_TEXT")
            idString = schemas.StrSchema
            isInteger = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "kind": kind,
                "id": id,
                "description": description,
                "language": language,
                "statisticsEnabled": statisticsEnabled,
                "allowedValues": allowedValues,
                "stringType": stringType,
                "idString": idString,
                "isInteger": isInteger,
            }
    
    kind: MetaOapg.properties.kind
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statisticsEnabled"]) -> MetaOapg.properties.statisticsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedValues"]) -> MetaOapg.properties.allowedValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringType"]) -> MetaOapg.properties.stringType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idString"]) -> MetaOapg.properties.idString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInteger"]) -> MetaOapg.properties.isInteger: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "kind", "id", "description", "language", "statisticsEnabled", "allowedValues", "stringType", "idString", "isInteger", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statisticsEnabled"]) -> typing.Union[MetaOapg.properties.statisticsEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedValues"]) -> typing.Union[MetaOapg.properties.allowedValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringType"]) -> typing.Union[MetaOapg.properties.stringType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idString"]) -> typing.Union[MetaOapg.properties.idString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInteger"]) -> typing.Union[MetaOapg.properties.isInteger, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "kind", "id", "description", "language", "statisticsEnabled", "allowedValues", "stringType", "idString", "isInteger", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kind: typing.Union[MetaOapg.properties.kind, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        statisticsEnabled: typing.Union[MetaOapg.properties.statisticsEnabled, bool, schemas.Unset] = schemas.unset,
        allowedValues: typing.Union[MetaOapg.properties.allowedValues, list, tuple, schemas.Unset] = schemas.unset,
        stringType: typing.Union[MetaOapg.properties.stringType, str, schemas.Unset] = schemas.unset,
        idString: typing.Union[MetaOapg.properties.idString, str, schemas.Unset] = schemas.unset,
        isInteger: typing.Union[MetaOapg.properties.isInteger, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddAttributeTypeRequest':
        return super().__new__(
            cls,
            *args,
            kind=kind,
            name=name,
            id=id,
            description=description,
            language=language,
            statisticsEnabled=statisticsEnabled,
            allowedValues=allowedValues,
            stringType=stringType,
            idString=idString,
            isInteger=isInteger,
            _configuration=_configuration,
            **kwargs,
        )
