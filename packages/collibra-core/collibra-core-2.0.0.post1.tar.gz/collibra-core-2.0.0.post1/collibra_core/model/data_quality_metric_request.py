# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class DataQualityMetricRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The list of data quality metrics.
    """


    class MetaOapg:
        
        class properties:
            
            
            class countOperation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Sum": "SUM",
                        "Minimum": "MINIMUM",
                        "Maximum": "MAXIMUM",
                        "Average": "AVERAGE",
                        "Median": "MEDIAN",
                        "BooleanAnd": "BOOLEAN_AND",
                        "BooleanOr": "BOOLEAN_OR",
                    }
                
                @schemas.classproperty
                def SUM(cls):
                    return cls("Sum")
                
                @schemas.classproperty
                def MINIMUM(cls):
                    return cls("Minimum")
                
                @schemas.classproperty
                def MAXIMUM(cls):
                    return cls("Maximum")
                
                @schemas.classproperty
                def AVERAGE(cls):
                    return cls("Average")
                
                @schemas.classproperty
                def MEDIAN(cls):
                    return cls("Median")
                
                @schemas.classproperty
                def BOOLEAN_AND(cls):
                    return cls("BooleanAnd")
                
                @schemas.classproperty
                def BOOLEAN_OR(cls):
                    return cls("BooleanOr")
            attributeTypeId = schemas.UUIDSchema
            __annotations__ = {
                "countOperation": countOperation,
                "attributeTypeId": attributeTypeId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countOperation"]) -> MetaOapg.properties.countOperation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeTypeId"]) -> MetaOapg.properties.attributeTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["countOperation", "attributeTypeId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countOperation"]) -> typing.Union[MetaOapg.properties.countOperation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeTypeId"]) -> typing.Union[MetaOapg.properties.attributeTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["countOperation", "attributeTypeId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        countOperation: typing.Union[MetaOapg.properties.countOperation, str, schemas.Unset] = schemas.unset,
        attributeTypeId: typing.Union[MetaOapg.properties.attributeTypeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataQualityMetricRequest':
        return super().__new__(
            cls,
            *args,
            countOperation=countOperation,
            attributeTypeId=attributeTypeId,
            _configuration=_configuration,
            **kwargs,
        )
