# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class RelationTraceEntryRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The list of relation trace entries that describes relations along which the data quality result is calculated.
    """


    class MetaOapg:
        required = {
            "relationTypeId",
        }
        
        class properties:
            relationTypeId = schemas.UUIDSchema
            roleDirection = schemas.BoolSchema
            __annotations__ = {
                "relationTypeId": relationTypeId,
                "roleDirection": roleDirection,
            }
    
    relationTypeId: MetaOapg.properties.relationTypeId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationTypeId"]) -> MetaOapg.properties.relationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleDirection"]) -> MetaOapg.properties.roleDirection: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationTypeId", "roleDirection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationTypeId"]) -> MetaOapg.properties.relationTypeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleDirection"]) -> typing.Union[MetaOapg.properties.roleDirection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationTypeId", "roleDirection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        relationTypeId: typing.Union[MetaOapg.properties.relationTypeId, str, uuid.UUID, ],
        roleDirection: typing.Union[MetaOapg.properties.roleDirection, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RelationTraceEntryRequest':
        return super().__new__(
            cls,
            *args,
            relationTypeId=relationTypeId,
            roleDirection=roleDirection,
            _configuration=_configuration,
            **kwargs,
        )
