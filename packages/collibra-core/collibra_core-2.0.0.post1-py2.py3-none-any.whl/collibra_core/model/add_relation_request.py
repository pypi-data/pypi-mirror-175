# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_core import schemas  # noqa: F401


class AddRelationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "sourceId",
            "targetId",
            "typeId",
        }
        
        class properties:
            sourceId = schemas.UUIDSchema
            targetId = schemas.UUIDSchema
            typeId = schemas.UUIDSchema
            startingDate = schemas.Int64Schema
            endingDate = schemas.Int64Schema
            __annotations__ = {
                "sourceId": sourceId,
                "targetId": targetId,
                "typeId": typeId,
                "startingDate": startingDate,
                "endingDate": endingDate,
            }
    
    sourceId: MetaOapg.properties.sourceId
    targetId: MetaOapg.properties.targetId
    typeId: MetaOapg.properties.typeId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeId"]) -> MetaOapg.properties.typeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startingDate"]) -> MetaOapg.properties.startingDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endingDate"]) -> MetaOapg.properties.endingDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceId", "targetId", "typeId", "startingDate", "endingDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeId"]) -> MetaOapg.properties.typeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startingDate"]) -> typing.Union[MetaOapg.properties.startingDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endingDate"]) -> typing.Union[MetaOapg.properties.endingDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceId", "targetId", "typeId", "startingDate", "endingDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sourceId: typing.Union[MetaOapg.properties.sourceId, str, uuid.UUID, ],
        targetId: typing.Union[MetaOapg.properties.targetId, str, uuid.UUID, ],
        typeId: typing.Union[MetaOapg.properties.typeId, str, uuid.UUID, ],
        startingDate: typing.Union[MetaOapg.properties.startingDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endingDate: typing.Union[MetaOapg.properties.endingDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddRelationRequest':
        return super().__new__(
            cls,
            *args,
            sourceId=sourceId,
            targetId=targetId,
            typeId=typeId,
            startingDate=startingDate,
            endingDate=endingDate,
            _configuration=_configuration,
            **kwargs,
        )
