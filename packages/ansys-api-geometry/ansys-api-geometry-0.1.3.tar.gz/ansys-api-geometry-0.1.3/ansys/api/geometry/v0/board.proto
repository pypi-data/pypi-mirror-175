// Copyright 2021, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.
syntax = "proto3";
package ansys.api.geometry.v0;
option csharp_namespace = "Ansys.Api.Geometry.V0";
/*

service Board{
  // Adds a material to the current document
  //rpc AddMaterialToDocument(AddMaterialToDocumentRequest) returns (AddMaterialToDocumentResponse);
  //rpc GetMaterialNames(Empty) returns (GetMaterialNamesResponse);
  //rpc GetAllComponents(Empty) returns (GetAllComponentsResponse);
  //rpc GetComponentBodies(GetComponentBodiesRequest) returns (GetComponentBodiesResponse);
  //rpc GetComponentName(GetComponentNameRequest) returns (GetComponentNameResponse);
  //rpc CreateNamedSelection(CreateNamedSelectionRequest) returns (Empty);
  //rpc SetBodyMaterialByName(SetBodyMaterialByNameRequest) returns (Empty);
  //rpc TranslateBody(TranslateBodyRequest) returns (Empty);
  //rpc GetRootComponent(Empty) returns (GetRootComponentResponse);
  //rpc GetBodyFaces(GetBodyFacesRequest) returns (GetBodyFacesResponse);
  //rpc GetFaceEdges(GetFaceEdgesRequest) returns (GetFaceEdgesResponse);
  //rpc GetFaceArea(GetFaceAreaRequest) returns (GetFaceAreaResponse);
  //rpc GetEdgeFaces(GetEdgeFacesRequest) returns (GetEdgeFacesResponse);
  //rpc GetEdgeLength(GetEdgeLengthRequest) returns (GetEdgeLengthResponse);
  //rpc GetFaceLoops(GetFaceLoopsRequest) returns (GetFaceLoopsResponse);
  //rpc GetFaceNormal(GetFaceNormalRequest) returns (GetFaceNormalResponse);
  //rpc EvaluateFace(EvaluateFaceRequest) returns (EvaluateFaceResponse);
  //rpc FaceHasInnerLoop(FaceHasInnerLoopRequest) returns (FaceHasInnerLoopResponse);
  //rpc CreateSurfaceDesignBodyFromFace(CreateSurfaceDesignBodyFromFaceRequest) returns (CreateSurfaceDesignBodyFromFaceResponse);
  //rpc CreateExtrudedDesignBodyFromFaceProfile(CreateExtrudedDesignBodyFromFaceProfileRequest) returns (CreateExtrudedDesignBodyFromFaceProfileResponse);
  //rpc DeleteDesignBody(DeleteDesignBodyRequest) returns (Empty);
  //rpc DeleteNamedSelectionByName(DeleteNamedSelectionByNameRequest) returns (Empty);
  //rpc DeleteComponent(DeleteComponentRequest) returns (Empty);
  //rpc ProjectCurves(ProjectCurvesRequest) returns (ProjectCurvesResponse);
  //rpc ImprintCurves(ImprintCurvesRequest) returns (ImprintCurvesResponse);
  //rpc CreateExtrudedDesignBody(CreateExtrudedDesignBodyRequest) returns (CreateExtrudedDesignBodyResponse);
  //rpc SetComponentSharedTopology(SetComponentSharedTopologyRequest) returns (Empty);
  //rpc CreateCoordinateSystem(CreateCoordinateSystemRequest) returns (CreateCoordinateSystemResponse);
  //rpc PowerSelectFacesByAreaRange(PowerSelectFacesByAreaRangeRequest) returns (PowerSelectFacesByAreaRangeResponse);
  //rpc CreatePlanarDesignBody(CreatePlanarDesignBodyRequest) returns (CreatePlanarDesignBodyResponse);
  //rpc New(Empty) returns(NewDocumentResponse);
  //rpc SaveAs(SaveAsDocumentRequest) returns(SaveAsDocumentResponse);
  //rpc CreateComponent(CreateComponentRequest) returns(CreateComponentResponse);
  //rpc CreateBeamCircularProfile(CreateBeamCircularProfileRequest) returns(CreateBeamCircularProfileResponse);
  //rpc CreateBeamBodyLine(CreateBeamBodyLineRequest) returns (CreateBeamBodyLineResponse);
}

message AddMaterialToDocumentRequest {
	string name=1;
	double density=2;
	repeated MaterialProperty materialProperties=3;
}

message AddMaterialToDocumentResponse {
	string success=1;
}

message MaterialProperty {
	string id=1;
	string displayName=2;
	double value=3;
	string units=4;
}

// Should we expose MaterialPropertyId Strings as an enum or something?

message Empty {
}

message GetMaterialNamesResponse {
	repeated string keys=1;
}

message GetRootPartResponse {
	string id=1;
}

message GetAllComponentsRequest {
	string id=1;
}

message GetAllComponentsResponse {
	repeated string ids=1;
}

message GetComponentBodiesRequest {
	string id=1;
}

message GetComponentBodiesResponse {
	repeated string ids=1;
}

message GetComponentNameRequest {
	string id=1;
}

message GetComponentNameResponse {
	string name=1;
}

message CreateNamedSelectionRequest {
	repeated string members=1;
	string name=2;
}

message SetBodyMaterialByNameRequest {
	string body=1;
	string material=2;
}

message TranslateBodyRequest {
	string body=1;
	Direction direction=2;
	float distance=3;
}

message GetRootComponentResponse {
	string id=1;
}

message GetBodyFacesRequest {
	string body=1;
}

message GetBodyFacesResponse {
	repeated string ids=1;
}

message GetFaceEdgesRequest {
	string face=1;
}

message GetFaceEdgesResponse {
	repeated string ids=1;
}

message GetFaceAreaRequest {
	string face=1;
}

message GetFaceAreaResponse {
	double area=1;
}
	
message GetEdgeFacesRequest {
	string edge=1;
}

message GetEdgeFacesResponse {
	repeated string ids=1;
}

message GetEdgeLengthRequest {
	string edge=1;
}

message GetEdgeLengthResponse {
	double length=1;
}

message GetFaceLoopsRequest {
	string face=1;
}

message GetFaceLoopsResponse {
	repeated Loop loops=1;
}

message Loop {
	string type=1;
	double length=2;
	Box boundingBox=3;
	repeated string edges=4;
}

message GetFaceNormalRequest {
	string face=1;
	double u=2;
	double v=3;
}

message GetFaceNormalResponse {
	Direction direction=1;
}

message EvaluateFaceRequest {
	string face=1;
	double u=2;
	double v=3;
}

message EvaluateFaceResponse {
	Point point=1;
}

message FaceHasInnerLoopRequest {
	string face=1;
}

message FaceHasInnerLoopResponse {
	bool hasInnerLoop=1;
}

message CreateSurfaceDesignBodyFromFaceRequest {
	string name=1;
	string parent=2;
	string face=3;
}

message CreateSurfaceDesignBodyFromFaceResponse {
	string id=1;
}

message CreateExtrudedDesignBodyFromFaceProfileRequest {
	string name=1;
	string parent=2;
	string face=3;
	double distance=4;
}

message CreateExtrudedDesignBodyFromFaceProfileResponse {
	string id=1;
}

message DeleteDesignBodyRequest {
	string body=1;
}

message DeleteNamedSelectionByNameRequest {
	string name=1;
}

message DeleteComponentRequest {
	string component=1;
}

message ProjectCurvesRequest {
	string body=1;
	Geometries curves=2;
	Direction direction=3;
	bool closestFace=4;
}

message ProjectCurvesResponse {
	repeated string faces=1;
}

message ImprintCurvesRequest {
	string body=1;
	Geometries curves=2;
	repeated string faces=3;
}

message ImprintCurvesResponse {
	repeated string edges=1;
}

message CreateExtrudedDesignBodyRequest {
	string name=1;
	string parent=2;
	Plane plane=3;
	Geometries geometries=4;
	double distance=5;
}

message CreateExtrudedDesignBodyResponse {
	string id=1;
}

message SetComponentSharedTopologyRequest {
	string component=1;
	ShareType shareType=2;
}

enum ShareType {
	SHARETYPE_NONE=0;
	SHARETYPE_SHARE=1;
	SHARETYPE_MERGE=2;
	SHARETYPE_GROUPS=3;
}

message CreateCoordinateSystemRequest {
	string parent=1;
	string name=2;
	Frame frame=3;
}

message CreateCoordinateSystemResponse {
	string id=1;
}

message PowerSelectFacesByAreaRangeRequest {
	string body=1;
	double area1=2;
	double area2=3;
}

message PowerSelectFacesByAreaRangeResponse {
	repeated string faces=1;
}

message CreatePlanarDesignBodyRequest {
	string name=1;
	string parent=2;
	Plane plane=3;
	Geometries geometries=4;
}

message CreatePlanarDesignBodyResponse {
	string id=1;
}

message NewDocumentResponse{
	string id = 1;
}

message SaveAsDocumentRequest{
	string filepath = 1;
}

message SaveAsDocumentResponse{
	string id = 1;
}

message CreateComponentRequest {
	// Display name given to component
	string display_name = 1;
	// Parent Part
	string parent = 2;
	// Template Part (If empty, will be generated)
	string template = 3;
}

message CreateComponentResponse {
	// Created component.
	string component = 1;
	// Template Part
	string template=2;
}

message Direction {
	double x = 1;
	double y = 2;
	double z = 3;
}

message Point {
	double x = 1;
	double y = 2;
	double z = 3;
}

message Frame {
	Point origin = 1;
	Direction dir_x = 2;
	Direction dir_y = 3;
}

message Plane {
	Frame frame = 1;
}

message Box {
	Point min = 1;
	Point max = 2;
}

message Geometries {
	repeated Point points = 1;
	repeated Line lines = 2;
	repeated Arc arcs = 3;
	repeated Circle circles = 4;
	repeated Ellipse ellipses = 5;
	repeated Polygon polygons = 6;
}

message Line {
	Point start=1;
	Point end=2;
}

message Circle {
	Point center=1;
	double radius=2;
}

message Arc {
	Point center=1;
	Point start=2;
	Point end=3;
	Direction axis=4;
}

message Ellipse {
	Point center=1;
	double majorradius=2;
	double minorradius=3;
}

message Polygon {
	Point center=1;
	double radius=2;
	int32 numberofsides=3;
}

message CreateBeamCircularProfileRequest {
	Plane plane=1;
	double radius=2;
	Point origin=3;
	string name=4;
}

message CreateBeamCircularProfileResponse {
	string id=1;
}

message CreateBeamBodyLineRequest {
	string profile=1;
	Line line=2;
}

message CreateBeamBodyLineResponse {
	string id=1;
}*/