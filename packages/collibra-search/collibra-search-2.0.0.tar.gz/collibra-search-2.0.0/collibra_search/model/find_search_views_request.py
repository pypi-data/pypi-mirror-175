# coding: utf-8

"""
    Collibra Search API

    <p>The Search API allows you to create your own integration with the Collibra Search Engine.<br /> Find your data!</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_search import schemas  # noqa: F401


class FindSearchViewsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The search criteria for views.
    """


    class MetaOapg:
        
        class properties:
            offset = schemas.Int32Schema
            limit = schemas.Int32Schema
            countLimit = schemas.Int32Schema
            name = schemas.StrSchema
            
            
            class nameMatchMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "START": "START",
                        "END": "END",
                        "ANYWHERE": "ANYWHERE",
                        "EXACT": "EXACT",
                    }
                
                @schemas.classproperty
                def START(cls):
                    return cls("START")
                
                @schemas.classproperty
                def END(cls):
                    return cls("END")
                
                @schemas.classproperty
                def ANYWHERE(cls):
                    return cls("ANYWHERE")
                
                @schemas.classproperty
                def EXACT(cls):
                    return cls("EXACT")
            
            
            class sortField(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NAME": "NAME",
                    }
                
                @schemas.classproperty
                def NAME(cls):
                    return cls("NAME")
            
            
            class sortOrder(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ASC": "ASC",
                        "DESC": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("ASC")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("DESC")
            __annotations__ = {
                "offset": offset,
                "limit": limit,
                "countLimit": countLimit,
                "name": name,
                "nameMatchMode": nameMatchMode,
                "sortField": sortField,
                "sortOrder": sortOrder,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countLimit"]) -> MetaOapg.properties.countLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameMatchMode"]) -> MetaOapg.properties.nameMatchMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortField"]) -> MetaOapg.properties.sortField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["offset", "limit", "countLimit", "name", "nameMatchMode", "sortField", "sortOrder", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countLimit"]) -> typing.Union[MetaOapg.properties.countLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameMatchMode"]) -> typing.Union[MetaOapg.properties.nameMatchMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortField"]) -> typing.Union[MetaOapg.properties.sortField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["offset", "limit", "countLimit", "name", "nameMatchMode", "sortField", "sortOrder", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        countLimit: typing.Union[MetaOapg.properties.countLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nameMatchMode: typing.Union[MetaOapg.properties.nameMatchMode, str, schemas.Unset] = schemas.unset,
        sortField: typing.Union[MetaOapg.properties.sortField, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FindSearchViewsRequest':
        return super().__new__(
            cls,
            *args,
            offset=offset,
            limit=limit,
            countLimit=countLimit,
            name=name,
            nameMatchMode=nameMatchMode,
            sortField=sortField,
            sortOrder=sortOrder,
            _configuration=_configuration,
            **kwargs,
        )
