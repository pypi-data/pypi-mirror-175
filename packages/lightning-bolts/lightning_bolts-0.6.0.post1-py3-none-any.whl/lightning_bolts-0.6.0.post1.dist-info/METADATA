Metadata-Version: 2.1
Name: lightning-bolts
Version: 0.6.0.post1
Summary: Lightning Bolts is a community contribution for ML researchers.
Home-page: https://github.com/Lightning-AI/lightning-bolts
Download-URL: https://github.com/PyTorchLightning/lightning-bolts
Author: Lightning AI et al.
Author-email: pytorch@lightning.ai
License: Apache-2.0
Project-URL: Bug Tracker, https://github.com/PyTorchLightning/lightning-bolts/issues
Project-URL: Documentation, https://lightning-bolts.rtfd.io/en/latest/
Project-URL: Source Code, https://github.com/PyTorchLightning/lightning-bolts
Keywords: deep learning,pytorch,AI
Classifier: Environment :: Console
Classifier: Natural Language :: English
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pytorch-lightning (>=1.7.0)
Requires-Dist: lightning-utilities (!=0.4.0,>=0.3.0)
Requires-Dist: torchvision (>=0.10.0)
Provides-Extra: dev
Requires-Dist: torchvision (>=0.10.*) ; extra == 'dev'
Requires-Dist: scikit-learn (>=1.0.2) ; extra == 'dev'
Requires-Dist: Pillow ; extra == 'dev'
Requires-Dist: opencv-python-headless ; extra == 'dev'
Requires-Dist: gym[atari] (<0.20.0,>=0.17.2) ; extra == 'dev'
Requires-Dist: atari-py (==0.2.*) ; extra == 'dev'
Requires-Dist: box2d-py (==2.3.*) ; extra == 'dev'
Requires-Dist: opencv-python (>=4.5.5.62) ; extra == 'dev'
Requires-Dist: matplotlib ; extra == 'dev'
Requires-Dist: wandb ; extra == 'dev'
Requires-Dist: scipy ; extra == 'dev'
Requires-Dist: codecov (<=2.1.12,>=2.1) ; extra == 'dev'
Requires-Dist: pytest (<=7.2.0,>=6.0) ; extra == 'dev'
Requires-Dist: pytest-cov (<=4.0.0,>2.10) ; extra == 'dev'
Requires-Dist: check-manifest ; extra == 'dev'
Requires-Dist: pre-commit (>=1.0) ; extra == 'dev'
Requires-Dist: mypy (==0.982) ; extra == 'dev'
Requires-Dist: atari-py (==0.2.9) ; extra == 'dev'
Requires-Dist: scikit-learn (<=1.1.3,>=1.0.2) ; extra == 'dev'
Requires-Dist: sparseml (<=1.2.0,>=1.0.0) ; extra == 'dev'
Requires-Dist: ale-py (<=0.8.0,>=0.7) ; extra == 'dev'
Requires-Dist: jsonargparse[signatures] ; extra == 'dev'
Provides-Extra: extra
Requires-Dist: torchvision (>=0.10.*) ; extra == 'extra'
Requires-Dist: scikit-learn (>=1.0.2) ; extra == 'extra'
Requires-Dist: Pillow ; extra == 'extra'
Requires-Dist: opencv-python-headless ; extra == 'extra'
Requires-Dist: gym[atari] (<0.20.0,>=0.17.2) ; extra == 'extra'
Requires-Dist: atari-py (==0.2.*) ; extra == 'extra'
Requires-Dist: box2d-py (==2.3.*) ; extra == 'extra'
Requires-Dist: opencv-python (>=4.5.5.62) ; extra == 'extra'
Requires-Dist: matplotlib ; extra == 'extra'
Requires-Dist: wandb ; extra == 'extra'
Requires-Dist: scipy ; extra == 'extra'
Provides-Extra: loggers
Requires-Dist: matplotlib ; extra == 'loggers'
Requires-Dist: wandb ; extra == 'loggers'
Requires-Dist: scipy ; extra == 'loggers'
Provides-Extra: models
Requires-Dist: torchvision (>=0.10.*) ; extra == 'models'
Requires-Dist: scikit-learn (>=1.0.2) ; extra == 'models'
Requires-Dist: Pillow ; extra == 'models'
Requires-Dist: opencv-python-headless ; extra == 'models'
Requires-Dist: gym[atari] (<0.20.0,>=0.17.2) ; extra == 'models'
Requires-Dist: atari-py (==0.2.*) ; extra == 'models'
Requires-Dist: box2d-py (==2.3.*) ; extra == 'models'
Requires-Dist: opencv-python (>=4.5.5.62) ; extra == 'models'
Provides-Extra: test
Requires-Dist: codecov (<=2.1.12,>=2.1) ; extra == 'test'
Requires-Dist: pytest (<=7.2.0,>=6.0) ; extra == 'test'
Requires-Dist: pytest-cov (<=4.0.0,>2.10) ; extra == 'test'
Requires-Dist: check-manifest ; extra == 'test'
Requires-Dist: pre-commit (>=1.0) ; extra == 'test'
Requires-Dist: mypy (==0.982) ; extra == 'test'
Requires-Dist: atari-py (==0.2.9) ; extra == 'test'
Requires-Dist: scikit-learn (<=1.1.3,>=1.0.2) ; extra == 'test'
Requires-Dist: sparseml (<=1.2.0,>=1.0.0) ; extra == 'test'
Requires-Dist: ale-py (<=0.8.0,>=0.7) ; extra == 'test'
Requires-Dist: jsonargparse[signatures] ; extra == 'test'

<div align="center">

<img src="https://github.com/Lightning-AI/lightning-bolts/raw/0.6.0.post1/docs/source/_images/logos/bolts_logo.png" width="400px">

**Deep Learning components for extending PyTorch Lightning**

______________________________________________________________________

<p align="center">
  <a href="#install">Installation</a> •
  <a href="https://lightning-bolts.readthedocs.io/en/latest/">Latest Docs</a> •
  <a href="https://lightning-bolts.readthedocs.io/en/0.6.0.post1">Stable Docs</a> •
  <a href="#what-is-bolts">About</a> •
  <a href="#team">Community</a> •
  <a href="https://www.pytorchlightning.ai/">Website</a> •
  <a href="https://www.grid.ai/">Grid AI</a> •
  <a href="#license">License</a>
</p>

[![PyPI Status](https://badge.fury.io/py/lightning-bolts.svg)](https://badge.fury.io/py/lightning-bolts)
[![PyPI Status](https://pepy.tech/badge/lightning-bolts)](https://pepy.tech/project/lightning-bolts)
[![Build Status](https://dev.azure.com/Lightning-AI/lightning%20Bolts/_apis/build/status/Lightning-AI.lightning-bolts?branchName=master)](https://dev.azure.com/Lightning-AI/lightning%20Bolts/_build?definitionId=31&_a=summary&repositoryFilter=13&branchFilter=4923%2C4923)
[![codecov](https://codecov.io/gh/Lightning-AI/lightning-bolts/release/0.6.0.post1/graph/badge.svg?token=O8p0qhvj90)](https://codecov.io/gh/Lightning-AI/lightning-bolts)

[![Documentation Status](https://readthedocs.org/projects/lightning-bolts/badge/?version=latest)](https://lightning-bolts.readthedocs.io/en/latest/)
[![Slack](https://img.shields.io/badge/slack-chat-green.svg?logo=slack)](https://www.pytorchlightning.ai/community)
[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/PytorchLightning/lightning-bolts/blob/master/LICENSE)

</div>

______________________________________________________________________

## Getting Started

Pip / Conda

```bash
pip install lightning-bolts
```

<details>
  <summary>Other installations</summary>

Install bleeding-edge (no guarantees)

```bash
pip install git+https://github.com/PytorchLightning/lightning-bolts.git@master --upgrade
```

To install all optional dependencies

```bash
pip install lightning-bolts["extra"]
```

</details>

## What is Bolts

Bolts provides a variety of components to extend PyTorch Lightning such as callbacks & datasets, for applied research and production.

## News

- Sept 22: [Leverage Sparsity for Faster Inference with Lightning Flash and SparseML](https://devblog.pytorchlightning.ai/leverage-sparsity-for-faster-inference-with-lightning-flash-and-sparseml-cdda1165622b)
- Aug 26: [Fine-tune Transformers Faster with Lightning Flash and Torch ORT](https://devblog.pytorchlightning.ai/fine-tune-transformers-faster-with-lightning-flash-and-torch-ort-ec2d53789dc3)

#### Example 1: Accelerate Lightning Training with the Torch ORT Callback

Torch ORT converts your model into an optimized ONNX graph, speeding up training & inference when using NVIDIA or AMD GPUs. See the [documentation](https://lightning-bolts.readthedocs.io/en/latest/callbacks/torch_ort.html) for more details.

```python
from pytorch_lightning import LightningModule, Trainer
import torchvision.models as models
from pl_bolts.callbacks import ORTCallback


class VisionModel(LightningModule):
    def __init__(self):
        super().__init__()
        self.model = models.vgg19_bn(pretrained=True)

    ...


model = VisionModel()
trainer = Trainer(gpus=1, callbacks=ORTCallback())
trainer.fit(model)
```

#### Example 2: Introduce Sparsity with the SparseMLCallback to Accelerate Inference

We can introduce sparsity during fine-tuning with [SparseML](https://github.com/neuralmagic/sparseml), which ultimately allows us to leverage the [DeepSparse](https://github.com/neuralmagic/deepsparse) engine to see performance improvements at inference time.

```python
from pytorch_lightning import LightningModule, Trainer
import torchvision.models as models
from pl_bolts.callbacks import SparseMLCallback


class VisionModel(LightningModule):
    def __init__(self):
        super().__init__()
        self.model = models.vgg19_bn(pretrained=True)

    ...


model = VisionModel()
trainer = Trainer(gpus=1, callbacks=SparseMLCallback(recipe_path="recipe.yaml"))
trainer.fit(model)
```

## Are specific research implementations supported?

We'd like to encourage users to contribute general components that will help a broad range of problems, however components that help specifics domains will also be welcomed!

For example a callback to help train SSL models would be a great contribution, however the next greatest SSL model from your latest paper would be a good contribution to [Lightning Flash](https://github.com/PyTorchLightning/lightning-flash).

Use [Lightning Flash](https://github.com/PyTorchLightning/lightning-flash) to train, predict and serve state-of-the-art models for applied research. We suggest looking at our [VISSL](https://lightning-flash.readthedocs.io/en/latest/integrations/vissl.html) Flash integration for SSL based tasks.

## Contribute!

Bolts is supported by the PyTorch Lightning team and the PyTorch Lightning community!

Join our Slack and/or read our [CONTRIBUTING](./.github/CONTRIBUTING.md) guidelines to get help becoming a contributor!

______________________________________________________________________

## License

Please observe the Apache 2.0 license that is listed in this repository.
In addition the Lightning framework is Patent Pending.
