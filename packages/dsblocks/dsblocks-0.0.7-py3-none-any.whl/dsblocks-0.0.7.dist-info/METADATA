Metadata-Version: 2.1
Name: dsblocks
Version: 0.0.7
Summary: DS Blocks
Home-page: https://github.com/Jaume-JCI/ds-blocks
Author: Jaume Amores
Author-email: jamorej@jci.com
License: Apache Software License 2.0
Keywords: nbdev jupyter notebook python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas
Requires-Dist: scikit-learn
Requires-Dist: pyarrow
Requires-Dist: numpy
Requires-Dist: ipython
Requires-Dist: matplotlib
Requires-Dist: graphviz
Requires-Dist: optuna
Requires-Dist: sh
Requires-Dist: ipynbname
Requires-Dist: tensorflow
Requires-Dist: rich
Provides-Extra: dev
Requires-Dist: pytest ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: ipdb ; extra == 'dev'
Requires-Dist: jupyter ; extra == 'dev'
Requires-Dist: ipykernel ; extra == 'dev'
Requires-Dist: hpsearch ; extra == 'dev'

DS Blocks
================

<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

`DS Blocks` makes it easy to write highly modular and compact data
science pipelines. It is based on a generalization of the well-known
scikit-learn pipeline design, enriching and extending it in multiple
ways. By doing so, `DS Blocks` makes it possible to express the ML
solution in terms of independent building blocks that can be easily
moved around and reused to create different solutions. At the same time,
`DS Blocks` makes it possible to write concise code by automatically
taking care of common steps that are needed when building a data science
pipeline, resulting in a significant reduction of boiler-plate code.

The following is a selection of some of the features provided by
`DS Blocks`:

-   Automatize common steps that are usually present in ML code,
    including common caching / loading of intermediate results across
    the entire pipeline, logging, profiling, conversion of data to
    appropriate format, and more.

-   Make it possible to easily show statistics and other types of
    information about the output of each component in the pipeline,
    print a summary of the pipeline, plot a diagram of the components,
    and show the dimensionality of the output provided by each
    component.

-   Extend scikit-learn pipelines in several ways, including: i) make it
    possible to use any data type in the communication between
    components. This is done through data conversion layers that
    facilitate reusing the components across different pipelines,
    regardless of the data format used by rest of the components. In
    particular, two important data types enabled in `DS Blocks` are
    DataFrames and dictionaries. Using pandas DataFrame is suitable for
    many data science problems such as time-series analysis, making it
    easy to visualize different periods of time, subsets of variables
    and categories (i.e., normal vs anomaly). While standard
    scikit-learn components accept DataFrame as input data type, the
    output is always provided as a numpy array, making it necessary to
    manually convert the output back to the original DataFrame format
    every time, with the corresponding proliferation of boiler-plate
    code. `DS Blocks` enables a consistent use of DataFrames across the
    whole pipeline: when the input is a DataFrame, the output will be a
    DataFrame as well, and when the input is a numpy array the output is
    a numpy array.

-   Enable the use of sampling components that not only change the
    variables (or columns) but also change the number of observations
    (or rows), by either under-sampling or over-sampling. This is not
    supported by standard scikit-learn components.

For further details, please see the
[documentation](https://jaume-jci.github.io/ds-blocks/)

## Install

pip install dsblocks

## Documentation

Documentation can be found
[here](https://jaume-jci.github.io/ds-blocks/)
