Metadata-Version: 2.1
Name: drs-compliance
Version: 0.0.16
Summary: A compliance utility reporting system for GA4GH DRS server implementations. Supports GA4GH DRS versions - 1.2.0
Home-page: https://github.com/ga4gh/drs-compliance-suite
Author: Yash Puligundla
Author-email: yasasvini.puligundla@ga4gh.org
License: MIT
Platform: UNKNOWN
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE

# drs-compliance-suite
Tests to verify the compliance of a DRS implementation with GA4GH Data Repository Service (DRS) specification. 
This compliance suite supports the following DRS versions
* DRS 1.2.0

## Installations
* Python 3.x
* Docker

## Running natively in a developer environment

* First spin up a DRS starter kit on port 5000 or a port of your choice. Make sure to specify the port number correctly in the next step.
* The following command will run the DRS complaince suite against the specified DRS implementation.
``` 
python compliance_suite/report_runner.py --server_base_url "http://localhost:5000/ga4gh/drs/v1" --platform_name "ga4gh starter kit drs" --platform_description "GA4GH reference implementation of DRS specification" --auth_type "basic"
```
### Command Line Arguments
#### <TODO: Add a table with default values, data type !!>
#### Required:
* **--server_base_url** : base url of the DRS implementation that is being tested by the compliance suite
* **--platform_name** : name of the platform hosting the DRS server
* **--platform_description** : description of the platform hosting the DRS server
* **--auth_type** : type of authentication used in the DRS server implementation. It can be one of the following -
  * "none"
  * "basic"
  * "bearer"
  * "passport"
## Running the good mock server
```
python unittests/good_mock_server.py --auth_type "none" --app_host "0.0.0.0" --app_port "8089"
```
### Command Line Arguments
#### Required:
* **--app_port** : port where the mock server is running
#### Optional:
* **--auth_type** : type of authentication. It can be one of the following -
  * "none"
  * "basic"
  * "bearer"
  * "passport"
* **--app_host** : name of the host where the mock server is running

## Running unittests for testing
Note: Both bad and good mock servers should be running beforehand
#### Running the mock servers
```
python unittests/good_mock_server.py --auth_type "none" --app_host "0.0.0.0" --app_port "8089"
python unittests/bad_mock_server.py --auth_type "none" --app_host "0.0.0.0" --app_port "8088"
```
###### Run the tests
```
py.test -v
```
###### Check the code coverage of the tests
```
pytest --cov=compliance_suite unittests/ 
```

