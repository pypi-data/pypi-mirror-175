import{d as v,u as b,a as k,b as m,f as D,i as t,o as x,g as F,w as p,h as i,ax as S,ay as T,q as $,aj as d,az as B,aA as z,G as f,am as y}from"./index.52801128.js";import{u as A}from"./useRouteParam.2cd4d7eb.js";import{u as N}from"./usePageTitle.2eedd110.js";const E=v({__name:"FlowRunCreate",setup(P){const a=A("id"),n=b(),_=k(d.getDeployment,[a]),e=m(()=>_.response),w=async s=>{var r,o,l;try{const u=await d.createDeploymentFlowRun(a.value,s),c=(l=(o=(r=s.state)==null?void 0:r.stateDetails)==null?void 0:o.scheduledTime)!=null?l:void 0,g=!c,C=B(z,{flowRun:u,flowRunRoute:f.flowRun,router:n,immediate:g,startTime:c});y(C,"success"),n.push(f.deployment(a.value))}catch(u){y("Something went wrong trying to create a flow run","error"),console.error(u)}},h=()=>{n.back()},R=m(()=>e.value?`Create Flow Run for Deployment: ${e.value.name}`:"Create Flow Run for Deployment");return N(R),(s,r)=>{const o=D("p-layout-default");return t(e)?(x(),F(o,{key:0},{header:p(()=>[i(t(S),{deployment:t(e)},null,8,["deployment"])]),default:p(()=>[i(t(T),{deployment:t(e),onSubmit:w,onCancel:h},null,8,["deployment"])]),_:1})):$("",!0)}}});export{E as default};
