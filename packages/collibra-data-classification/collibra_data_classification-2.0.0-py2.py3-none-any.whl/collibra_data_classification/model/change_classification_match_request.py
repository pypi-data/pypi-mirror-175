# coding: utf-8

"""
    Collibra Catalog classification API

    <p>The Catalog API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from collibra_data_classification import schemas  # noqa: F401


class ChangeClassificationMatchRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The criteria for changing classification match.
    """


    class MetaOapg:
        
        class properties:
            classificationMatchId = schemas.UUIDSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACCEPTED": "ACCEPTED",
                        "REJECTED": "REJECTED",
                    }
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
            confidence = schemas.Float64Schema
            __annotations__ = {
                "classificationMatchId": classificationMatchId,
                "status": status,
                "confidence": confidence,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classificationMatchId"]) -> MetaOapg.properties.classificationMatchId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidence"]) -> MetaOapg.properties.confidence: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["classificationMatchId", "status", "confidence", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classificationMatchId"]) -> typing.Union[MetaOapg.properties.classificationMatchId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidence"]) -> typing.Union[MetaOapg.properties.confidence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["classificationMatchId", "status", "confidence", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        classificationMatchId: typing.Union[MetaOapg.properties.classificationMatchId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        confidence: typing.Union[MetaOapg.properties.confidence, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangeClassificationMatchRequest':
        return super().__new__(
            cls,
            *args,
            classificationMatchId=classificationMatchId,
            status=status,
            confidence=confidence,
            _configuration=_configuration,
            **kwargs,
        )
