{"version":3,"sources":["components/Loading.tsx","pages/node/NodeDetail.tsx","pages/node/hook/useNodeDetail.ts"],"names":["Loading","loading","open","style","zIndex","color","useStyle","makeStyles","theme","root","padding","spacing","paper","marginTop","marginBottom","label","fontWeight","tab","showMeasureKeys","ViewDataDisplayer","view","tags","otherProps","Grid","item","xs","split","pop","slice","join","Object","keys","length","JSON","stringify","values","NodeDetailPage","props","classes","params","match","useState","selectedTab","setTab","nodeDetail","setNode","msg","setMsg","namespaceMap","useContext","GlobalContext","isRefreshing","setRefresh","tot","useRef","getDetail","useCallback","a","getNodeDetail","id","data","rspData","result","detail","current","setTimeout","raylet","useEffect","clearTimeout","onRefreshChange","event","target","checked","handleChange","newValue","useNodeDetail","className","startsWith","TitleCard","title","StatusChip","type","status","state","Switch","onChange","name","inputProps","Tabs","value","Tab","workers","actors","container","hostname","ip","cpus","Fragment","loadAvg","map","e","Number","toFixed","dayjs","bootTime","format","memoryConverter","networkSpeed","mem","PercentageBar","num","total","cpu","disk","entries","path","obj","key","used","percent","free","to","encodeURIComponent","logUrl","height","overflow","cmdline","pid","numWorkers","nodeManagerPort","viewData","find","viewName","toUpperCase","maxHeight","measures","TableContainer","actorMap","ActorTable"],"mappings":"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","file":"static/js/9.e100310c.chunk.js","sourcesContent":["import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import {\n  Grid,\n  makeStyles,\n  Switch,\n  Tab,\n  TableContainer,\n  Tabs,\n} from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport ActorTable from \"../../components/ActorTable\";\nimport Loading from \"../../components/Loading\";\nimport PercentageBar from \"../../components/PercentageBar\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\nimport RayletWorkerTable from \"../../components/WorkerTable\";\nimport { ViewMeasures } from \"../../type/raylet\";\nimport { memoryConverter } from \"../../util/converter\";\nimport { useNodeDetail } from \"./hook/useNodeDetail\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  label: {\n    fontWeight: \"bold\",\n  },\n  tab: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst showMeasureKeys = [\n  \"local_total_resource\",\n  \"local_available_resource\",\n  \"actor_stats\",\n  \"task_dependency_manager_stats\",\n  \"reconstruction_policy_stats\",\n  \"scheduling_queue_stats\",\n  \"object_manager_stats\",\n];\n\nconst ViewDataDisplayer = ({ view }: { view?: ViewMeasures }) => {\n  if (!view) {\n    return null;\n  }\n  const { tags = \"\", ...otherProps } = view;\n\n  return (\n    <Grid item xs={6}>\n      <span>{tags.split(\",\").pop()?.split(\":\").slice(1).join(\":\")}</span>=\n      {Object.keys(otherProps).length > 0 ? (\n        JSON.stringify(Object.values(otherProps).pop())\n      ) : (\n        <span style={{ color: \"gray\" }}>null</span>\n      )}\n    </Grid>\n  );\n};\n\nconst NodeDetailPage = (props: RouteComponentProps<{ id: string }>) => {\n  const classes = useStyle();\n  const {\n    params,\n    selectedTab,\n    nodeDetail,\n    msg,\n    isRefreshing,\n    onRefreshChange,\n    raylet,\n    handleChange,\n  } = useNodeDetail(props);\n\n  return (\n    <div className={classes.root}>\n      <Loading loading={msg.startsWith(\"Loading\")} />\n      <TitleCard title={`NODE - ${params.id}`}>\n        <StatusChip\n          type=\"node\"\n          status={nodeDetail?.raylet?.state || \"LOADING\"}\n        />\n        <br />\n        Auto Refresh:\n        <Switch\n          checked={isRefreshing}\n          onChange={onRefreshChange}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg}\n      </TitleCard>\n      <TitleCard title=\"Node Detail\">\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          className={classes.tab}\n        >\n          <Tab value=\"info\" label=\"Info\" />\n          <Tab value=\"raylet\" label=\"Raylet\" />\n          <Tab\n            value=\"worker\"\n            label={`Worker (${nodeDetail?.workers.length || 0})`}\n          />\n          <Tab\n            value=\"actor\"\n            label={`Actor (${\n              Object.values(nodeDetail?.actors || {}).length || 0\n            })`}\n          />\n        </Tabs>\n        {nodeDetail && selectedTab === \"info\" && (\n          <div className={classes.paper}>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Hostname</div>{\" \"}\n                {nodeDetail.hostname}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>IP</div> {nodeDetail.ip}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                {nodeDetail.cpus && (\n                  <React.Fragment>\n                    <div className={classes.label}>CPU (Logic/Physic)</div>{\" \"}\n                    {nodeDetail.cpus[0]}/ {nodeDetail.cpus[1]}\n                  </React.Fragment>\n                )}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Load (1/5/15min)</div>{\" \"}\n                {nodeDetail?.loadAvg[0] &&\n                  nodeDetail.loadAvg[0]\n                    .map((e) => Number(e).toFixed(2))\n                    .join(\"/\")}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Load per CPU (1/5/15min)</div>{\" \"}\n                {nodeDetail?.loadAvg[1] &&\n                  nodeDetail.loadAvg[1]\n                    .map((e) => Number(e).toFixed(2))\n                    .join(\"/\")}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Boot Time</div>{\" \"}\n                {dayjs(nodeDetail.bootTime * 1000).format(\n                  \"YYYY/MM/DD HH:mm:ss\",\n                )}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Sent Tps</div>{\" \"}\n                {memoryConverter(nodeDetail?.networkSpeed[0])}/s\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Recieved Tps</div>{\" \"}\n                {memoryConverter(nodeDetail?.networkSpeed[1])}/s\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Memory</div>{\" \"}\n                {nodeDetail?.mem && (\n                  <PercentageBar\n                    num={Number(nodeDetail?.mem[0] - nodeDetail?.mem[1])}\n                    total={nodeDetail?.mem[0]}\n                  >\n                    {memoryConverter(nodeDetail?.mem[0] - nodeDetail?.mem[1])}/\n                    {memoryConverter(nodeDetail?.mem[0])}({nodeDetail?.mem[2]}%)\n                  </PercentageBar>\n                )}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>CPU</div>{\" \"}\n                <PercentageBar num={Number(nodeDetail.cpu)} total={100}>\n                  {nodeDetail.cpu}%\n                </PercentageBar>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              {nodeDetail?.disk &&\n                Object.entries(nodeDetail?.disk).map(([path, obj]) => (\n                  <Grid item xs={6} key={path}>\n                    <div className={classes.label}>Disk ({path})</div>{\" \"}\n                    {obj && (\n                      <PercentageBar num={Number(obj.used)} total={obj.total}>\n                        {memoryConverter(obj.used)}/{memoryConverter(obj.total)}\n                        ({obj.percent}%, {memoryConverter(obj.free)} free)\n                      </PercentageBar>\n                    )}\n                  </Grid>\n                ))}\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Logs</div>{\" \"}\n                <Link to={`/log/${encodeURIComponent(nodeDetail.logUrl)}`}>\n                  log\n                </Link>\n              </Grid>\n            </Grid>\n          </div>\n        )}\n        {raylet && Object.keys(raylet).length > 0 && selectedTab === \"raylet\" && (\n          <React.Fragment>\n            <div className={classes.paper}>\n              <Grid container spacing={2}>\n                <Grid item xs>\n                  <div className={classes.label}>Command</div>\n                  <br />\n                  <div style={{ height: 200, overflow: \"auto\" }}>\n                    {nodeDetail?.cmdline.join(\" \")}\n                  </div>\n                </Grid>\n              </Grid>\n              <Grid container spacing={2}>\n                <Grid item xs>\n                  <div className={classes.label}>Pid</div> {raylet?.pid}\n                </Grid>\n                <Grid item xs>\n                  <div className={classes.label}>Workers Num</div>{\" \"}\n                  {raylet?.numWorkers}\n                </Grid>\n                <Grid item xs>\n                  <div className={classes.label}>Node Manager Port</div>{\" \"}\n                  {raylet?.nodeManagerPort}\n                </Grid>\n              </Grid>\n              {showMeasureKeys\n                .map((e) => raylet.viewData.find((view) => view.viewName === e))\n                .map((e) =>\n                  e ? (\n                    <React.Fragment key={e.viewName}>\n                      <p className={classes.label}>\n                        {e.viewName\n                          .split(\"_\")\n                          .map((e) => e[0].toUpperCase() + e.slice(1))\n                          .join(\" \")}\n                      </p>\n                      <Grid\n                        container\n                        spacing={2}\n                        style={{ maxHeight: 177, overflow: \"auto\" }}\n                      >\n                        {e.measures.map((e) => (\n                          <ViewDataDisplayer key={e.tags} view={e} />\n                        ))}\n                      </Grid>\n                    </React.Fragment>\n                  ) : null,\n                )}\n            </div>\n          </React.Fragment>\n        )}\n        {nodeDetail?.workers && selectedTab === \"worker\" && (\n          <React.Fragment>\n            <TableContainer className={classes.paper}>\n              <RayletWorkerTable\n                workers={nodeDetail?.workers}\n                actorMap={nodeDetail?.actors}\n              />\n            </TableContainer>\n          </React.Fragment>\n        )}\n        {nodeDetail?.actors && selectedTab === \"actor\" && (\n          <React.Fragment>\n            <TableContainer className={classes.paper}>\n              <ActorTable\n                actors={nodeDetail.actors}\n                workers={nodeDetail?.workers}\n              />\n            </TableContainer>\n          </React.Fragment>\n        )}\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default NodeDetailPage;\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { GlobalContext } from \"../../../App\";\nimport { getNodeDetail } from \"../../../service/node\";\nimport { NodeDetailExtend } from \"../../../type/node\";\n\nexport const useNodeDetail = (props: RouteComponentProps<{ id: string }>) => {\n  const {\n    match: { params },\n  } = props;\n  const [selectedTab, setTab] = useState(\"info\");\n  const [nodeDetail, setNode] = useState<NodeDetailExtend | undefined>();\n  const [msg, setMsg] = useState(\"Loading the node infos...\");\n  const { namespaceMap } = useContext(GlobalContext);\n  const [isRefreshing, setRefresh] = useState(true);\n  const tot = useRef<NodeJS.Timeout>();\n  const onRefreshChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  const getDetail = useCallback(async () => {\n    if (!isRefreshing) {\n      return;\n    }\n    const { data } = await getNodeDetail(params.id);\n    const { data: rspData, msg, result } = data;\n    if (rspData?.detail) {\n      setNode(rspData.detail);\n    }\n\n    if (msg) {\n      setMsg(msg);\n    }\n\n    if (result === false) {\n      setMsg(\"Node Query Error Please Check Node Name\");\n      setRefresh(false);\n    }\n\n    tot.current = setTimeout(getDetail, 4000);\n  }, [isRefreshing, params.id]);\n  const raylet = nodeDetail?.raylet;\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setTab(newValue);\n  };\n\n  useEffect(() => {\n    getDetail();\n    return () => {\n      if (tot.current) {\n        clearTimeout(tot.current);\n      }\n    };\n  }, [getDetail]);\n\n  return {\n    params,\n    selectedTab,\n    nodeDetail,\n    msg,\n    isRefreshing,\n    onRefreshChange,\n    raylet,\n    handleChange,\n    namespaceMap,\n  };\n};\n"],"sourceRoot":""}