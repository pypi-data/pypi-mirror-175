{"version":3,"sources":["components/Loading.tsx","service/job.ts","pages/job/JobDetail.tsx","pages/job/hook/useJobDetail.ts"],"names":["Loading","loading","open","style","zIndex","color","getJobList","get","getJobDetail","id","getJobProgress","jobId","jobIdQuery","useStyle","makeStyles","theme","root","padding","spacing","paper","marginTop","marginBottom","label","fontWeight","pageMeta","tab","dependenciesChip","margin","wordBreak","alert","palette","error","main","JobDetailPage","props","classes","params","match","useState","job","setJob","msg","setMsg","refreshing","setRefresh","selectedTab","setTab","ipLogMap","useContext","GlobalContext","tot","useRef","getJob","useCallback","a","rsp","data","detail","result","undefined","current","setTimeout","useEffect","clearTimeout","jobInfo","actorMap","jobActors","handleChange","event","newValue","handleSwitchChange","target","checked","useJobDetail","className","TitleCard","title","StatusChip","type","status","isDead","Switch","onChange","name","inputProps","Tabs","value","Tab","jobWorkers","length","Object","entries","Grid","container","item","xs","driverIpAddress","to","encodeURIComponent","driverPid","dayjs","Number","startTime","format","endTime","eventUrl","href","rel","failErrorMessage","dependencies","python","display","justifyItems","flexWrap","map","e","startsWith","longTextCut","key","java","TableContainer","Table","TableHead","TableRow","col","TableCell","align","TableBody","version","url","workers","ActorTable","actors"],"mappings":"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","file":"static/js/7.8d10442f.chunk.js","sourcesContent":["import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import { JobDetailRsp, JobListRsp, JobProgressRsp } from \"../type/job\";\nimport { get } from \"./requestHandlers\";\n\nexport const getJobList = () => {\n  return get<JobListRsp>(\"api/jobs/\");\n};\n\nexport const getJobDetail = (id: string) => {\n  return get<JobDetailRsp>(`jobs/${id}`);\n};\n\nexport const getJobProgress = (jobId?: string) => {\n  const jobIdQuery = jobId ? `?job_id=${jobId}` : \"\";\n  return get<JobProgressRsp>(`api/progress${jobIdQuery}`);\n};\n","import {\n  Grid,\n  makeStyles,\n  Switch,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tabs,\n} from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport ActorTable from \"../../components/ActorTable\";\nimport Loading from \"../../components/Loading\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\nimport RayletWorkerTable from \"../../components/WorkerTable\";\nimport { longTextCut } from \"../../util/func\";\nimport { useJobDetail } from \"./hook/useJobDetail\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  label: {\n    fontWeight: \"bold\",\n  },\n  pageMeta: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  tab: {\n    marginBottom: theme.spacing(2),\n  },\n  dependenciesChip: {\n    margin: theme.spacing(0.5),\n    wordBreak: \"break-all\",\n  },\n  alert: {\n    color: theme.palette.error.main,\n  },\n}));\n\nconst JobDetailPage = (props: RouteComponentProps<{ id: string }>) => {\n  const classes = useStyle();\n  const {\n    actorMap,\n    jobInfo,\n    job,\n    msg,\n    selectedTab,\n    handleChange,\n    handleSwitchChange,\n    params,\n    refreshing,\n    ipLogMap,\n  } = useJobDetail(props);\n\n  if (!job || !jobInfo) {\n    return (\n      <div className={classes.root}>\n        <Loading loading={msg.startsWith(\"Loading\")} />\n        <TitleCard title={`JOB - ${params.id}`}>\n          <StatusChip type=\"job\" status=\"LOADING\" />\n          <br />\n          Auto Refresh:\n          <Switch\n            checked={refreshing}\n            onChange={handleSwitchChange}\n            name=\"refresh\"\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n          />\n          <br />\n          Request Status: {msg} <br />\n        </TitleCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={`JOB - ${params.id}`}>\n        <StatusChip type=\"job\" status={jobInfo.isDead ? \"DEAD\" : \"ALIVE\"} />\n        <br />\n        Auto Refresh:\n        <Switch\n          checked={refreshing}\n          onChange={handleSwitchChange}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg} <br />\n      </TitleCard>\n      <TitleCard title=\"Job Detail\">\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          className={classes.tab}\n        >\n          <Tab value=\"info\" label=\"Info\" />\n          <Tab value=\"dep\" label=\"Dependencies\" />\n          <Tab\n            value=\"worker\"\n            label={`Worker(${job?.jobWorkers?.length || 0})`}\n          />\n          <Tab\n            value=\"actor\"\n            label={`Actor(${Object.entries(job?.jobActors || {}).length || 0})`}\n          />\n        </Tabs>\n        {selectedTab === \"info\" && (\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <span className={classes.label}>Driver IP</span>:{\" \"}\n              {jobInfo.driverIpAddress}\n            </Grid>\n            {ipLogMap[jobInfo.driverIpAddress] && (\n              <Grid item xs={4}>\n                <span className={classes.label}>Driver Log</span>:{\" \"}\n                <Link\n                  to={`/log/${encodeURIComponent(\n                    ipLogMap[jobInfo.driverIpAddress],\n                  )}?fileName=driver-${jobInfo.jobId}`}\n                  target=\"_blank\"\n                >\n                  Log\n                </Link>\n              </Grid>\n            )}\n            <Grid item xs={4}>\n              <span className={classes.label}>Driver Pid</span>:{\" \"}\n              {jobInfo.driverPid}\n            </Grid>\n            <Grid item xs={4}>\n              <span className={classes.label}>StartTime</span>:{\" \"}\n              {dayjs(Number(jobInfo.startTime)).format(\"YYYY/MM/DD HH:mm:ss\")}\n            </Grid>\n            <Grid item xs={4}>\n              <span className={classes.label}>EndTime</span>:{\" \"}\n              {jobInfo.endTime > 0\n                ? dayjs(Number(jobInfo.endTime)).format(\"YYYY/MM/DD HH:mm:ss\")\n                : \"-\"}\n            </Grid>\n            {jobInfo.eventUrl && (\n              <Grid item xs={4}>\n                <span className={classes.label}>Event Link</span>:{\" \"}\n                <a\n                  href={jobInfo.eventUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Event Log\n                </a>\n              </Grid>\n            )}\n            {jobInfo.failErrorMessage && (\n              <Grid item xs={12}>\n                <span className={classes.label}>Fail Error</span>:{\" \"}\n                <span className={classes.alert}>\n                  {jobInfo.failErrorMessage}\n                </span>\n              </Grid>\n            )}\n          </Grid>\n        )}\n        {jobInfo?.dependencies && selectedTab === \"dep\" && (\n          <div className={classes.paper}>\n            {jobInfo?.dependencies?.python && (\n              <TitleCard title=\"Python Dependencies\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyItems: \"space-around\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  {jobInfo.dependencies.python.map((e) => (\n                    <StatusChip\n                      type=\"deps\"\n                      status={e.startsWith(\"http\") ? longTextCut(e, 30) : e}\n                      key={e}\n                    />\n                  ))}\n                </div>\n              </TitleCard>\n            )}\n            {jobInfo?.dependencies?.java && (\n              <TitleCard title=\"Java Dependencies\">\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        {[\"Name\", \"Version\", \"URL\"].map((col) => (\n                          <TableCell align=\"center\" key={col}>\n                            {col}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {jobInfo.dependencies.java.map(\n                        ({ name, version, url }) => (\n                          <TableRow key={url}>\n                            <TableCell align=\"center\">{name}</TableCell>\n                            <TableCell align=\"center\">{version}</TableCell>\n                            <TableCell align=\"center\">\n                              <a\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                {url}\n                              </a>\n                            </TableCell>\n                          </TableRow>\n                        ),\n                      )}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </TitleCard>\n            )}\n          </div>\n        )}\n        {selectedTab === \"worker\" && (\n          <div>\n            <TableContainer className={classes.paper}>\n              <RayletWorkerTable\n                workers={job.jobWorkers}\n                actorMap={actorMap || {}}\n              />\n            </TableContainer>\n          </div>\n        )}\n        {selectedTab === \"actor\" && (\n          <div>\n            <TableContainer className={classes.paper}>\n              <ActorTable actors={actorMap || {}} workers={job.jobWorkers} />\n            </TableContainer>\n          </div>\n        )}\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default JobDetailPage;\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { GlobalContext } from \"../../../App\";\nimport { getJobDetail } from \"../../../service/job\";\nimport { JobDetail } from \"../../../type/job\";\n\nexport const useJobDetail = (props: RouteComponentProps<{ id: string }>) => {\n  const {\n    match: { params },\n  } = props;\n  const [job, setJob] = useState<JobDetail>();\n  const [msg, setMsg] = useState(\"Loading the job detail\");\n  const [refreshing, setRefresh] = useState(true);\n  const [selectedTab, setTab] = useState(\"info\");\n  const { ipLogMap } = useContext(GlobalContext);\n  const tot = useRef<NodeJS.Timeout>();\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setTab(newValue);\n  };\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  const getJob = useCallback(async () => {\n    if (!refreshing) {\n      return;\n    }\n    const rsp = await getJobDetail(params.id);\n\n    if (rsp.data?.data?.detail) {\n      setJob(rsp.data.data.detail);\n    }\n\n    if (rsp.data?.msg) {\n      setMsg(rsp.data.msg || \"\");\n    }\n\n    if (rsp.data.result === false) {\n      setMsg(\"Job Query Error Please Check JobId\");\n      setJob(undefined);\n      setRefresh(false);\n    }\n\n    tot.current = setTimeout(getJob, 4000);\n  }, [refreshing, params.id]);\n\n  useEffect(() => {\n    if (tot.current) {\n      clearTimeout(tot.current);\n    }\n    getJob();\n    return () => {\n      if (tot.current) {\n        clearTimeout(tot.current);\n      }\n    };\n  }, [getJob]);\n\n  const { jobInfo } = job || {};\n  const actorMap = job?.jobActors;\n\n  return {\n    actorMap,\n    jobInfo,\n    job,\n    msg,\n    selectedTab,\n    handleChange,\n    handleSwitchChange,\n    params,\n    refreshing,\n    ipLogMap,\n  };\n};\n"],"sourceRoot":""}