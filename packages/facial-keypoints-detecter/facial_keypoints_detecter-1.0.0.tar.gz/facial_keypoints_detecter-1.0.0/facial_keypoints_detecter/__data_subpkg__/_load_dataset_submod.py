
# ==================================================================================================================================
# START >> FILE INFO
# ==================================================================================================================================
# File        : facial_keypoint_detecter/__data_subpkg__/_load_dataset_submod.py
# Author      : Shashank Kumbhare
# Date        : 30/10/2022
# email       : shashankkumbhare8@gmail.com
# Description : This file is a python submodule for python subpackage
#               'facial_keypoint_detecter.__data_subpkg__'.
# ==================================================================================================================================
# END << FILE INFO
# ==================================================================================================================================



# ==================================================================================================================================
# START >> SUBMODULE >> facial_keypoint_detecter.__data_subpkg__._load_dataset_submod
# ==================================================================================================================================
# >>
"""
This submodule is created to manage all the datasets related variables.
"""



# ==================================================================================
# START >> IMPORTS
# ==================================================================================
# >>
from ..__dependencies_subpkg__ import *
from ..__constants_subpkg__    import *
from ..__auxil_subpkg__        import *
from .._preprocessing_subpkg   import *
# <<
# ==================================================================================
# END << IMPORTS
# ==================================================================================


# ==================================================================================
# START >> EXPORTS
# ==================================================================================
# >>
__all__ = ["FacialKeypointsDataset", "DataLoader", "ConcatDataset"]
# <<
# ==================================================================================
# END << EXPORTS
# ==================================================================================



# ==================================================================================================================================
# START >> CLASS >> FacialKeypointsDataset
# ==================================================================================================================================
# >>
class FacialKeypointsDataset:
    
    """
    ================================================================================
    START >> DOC >> FacialKeypointsDataset
    ================================================================================
        
        GENERAL INFO
        ============
            
            Face Landmarks dataset.
        
        PARAMETERS
        ==========
            
            csv_file <str>
                
                Path to the csv file with annotations.
            
            root_dir <str>
                
                Directory with all the images.
            
            transform <callable> (optional)
                
                Optional transform to be applied on a sample.
        
        RETURNS
        =======
            
            None
    
    ================================================================================
    END << DOC << FacialKeypointsDataset
    ================================================================================
    """
    
    # ==============================================================================================================================
    # START >> METHOD >> __init__
    # ==============================================================================================================================
    # >>
    def __init__( self
                , csv_file
                , root_dir
                , transform = None
                ) :
        
        self.key_pts_frame = pd.read_csv(csv_file)
        self.root_dir      = root_dir
        self.transform     = transform
    # <<
    # ==============================================================================================================================
    # END << METHOD << __init__
    # ==============================================================================================================================
    
    
    # ==============================================================================================================================
    # START >> METHOD >> __len__
    # ==============================================================================================================================
    # >>
    def __len__(self):
        """len(dataset) returns the size of the dataset."""
        return len(self.key_pts_frame)
    # <<
    # ==============================================================================================================================
    # END << METHOD << __len__
    # ==============================================================================================================================
    
    
    # ==============================================================================================================================
    # START >> METHOD >> __getitem__
    # ==============================================================================================================================
    # >>
    def __getitem__(self, idx):
        
        """__getitem__ to support the indexing such that dataset[i] can be used to get the i-th sample of image/keypoint data."""
        
        # Reading image from index >>
        image_name = os.path.join(self.root_dir, self.key_pts_frame.iloc[idx, 0])
        image      = cv2.imread(image_name)
        image      = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # Removing alpha color channel of image if present >>
        if(image.shape[2] == 4):
            image = image[:,:,0:3]
        
        # Creating sample dictionary >>
        key_pts = self.key_pts_frame.iloc[idx, 1:].values
        key_pts = key_pts.astype('float').reshape(-1, 2)
        sample  = {'image': image, 'keypoints': key_pts}
        
        # Applying transform >>
        if self.transform:
            sample = self.transform(sample)
        
        return sample
    # <<
    # ==============================================================================================================================
    # END << METHOD << __getitem__
    # ==============================================================================================================================
    
# <<
# ==================================================================================================================================
# END << CLASS << FacialKeypointsDataset
# ==================================================================================================================================


# <<
# ==================================================================================================================================
# END << SUBMODULE << facial_keypoint_detecter.__data_subpkg__._load_dataset_submod
# ==================================================================================================================================
