# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'resources/ui/mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(886, 684)
        self.gridLayout_3 = QtWidgets.QGridLayout(MainWindow)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.line = QtWidgets.QFrame(MainWindow)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_3.addWidget(self.line, 4, 0, 1, 2)
        self.group_encoding = QtWidgets.QGroupBox(MainWindow)
        self.group_encoding.setObjectName("group_encoding")
        self.grid_encoding = QtWidgets.QGridLayout(self.group_encoding)
        self.grid_encoding.setObjectName("grid_encoding")
        self.lbl_format = QtWidgets.QLabel(self.group_encoding)
        self.lbl_format.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_format.setObjectName("lbl_format")
        self.grid_encoding.addWidget(self.lbl_format, 0, 0, 1, 1)
        self.lbl_channels = QtWidgets.QLabel(self.group_encoding)
        self.lbl_channels.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_channels.setObjectName("lbl_channels")
        self.grid_encoding.addWidget(self.lbl_channels, 2, 0, 1, 1)
        self.hbox_format = QtWidgets.QHBoxLayout()
        self.hbox_format.setContentsMargins(-1, -1, 0, -1)
        self.hbox_format.setObjectName("hbox_format")
        self.lbl_filetype = QtWidgets.QLabel(self.group_encoding)
        self.lbl_filetype.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lbl_filetype.setObjectName("lbl_filetype")
        self.hbox_format.addWidget(self.lbl_filetype)
        self.cb_format = QtWidgets.QComboBox(self.group_encoding)
        self.cb_format.setObjectName("cb_format")
        self.cb_format.addItem("")
        self.cb_format.addItem("")
        self.cb_format.addItem("")
        self.cb_format.addItem("")
        self.cb_format.addItem("")
        self.cb_format.addItem("")
        self.hbox_format.addWidget(self.cb_format)
        self.lbl_bitdepth = QtWidgets.QLabel(self.group_encoding)
        self.lbl_bitdepth.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lbl_bitdepth.setObjectName("lbl_bitdepth")
        self.hbox_format.addWidget(self.lbl_bitdepth)
        self.cb_depth = QtWidgets.QComboBox(self.group_encoding)
        self.cb_depth.setObjectName("cb_depth")
        self.cb_depth.addItem("")
        self.cb_depth.addItem("")
        self.cb_depth.addItem("")
        self.cb_depth.addItem("")
        self.cb_depth.addItem("")
        self.hbox_format.addWidget(self.cb_depth)
        self.grid_encoding.addLayout(self.hbox_format, 0, 1, 1, 6)
        self.hbox_channels = QtWidgets.QHBoxLayout()
        self.hbox_channels.setContentsMargins(-1, -1, 0, -1)
        self.hbox_channels.setObjectName("hbox_channels")
        self.rb_mono = QtWidgets.QRadioButton(self.group_encoding)
        self.rb_mono.setObjectName("rb_mono")
        self.hbox_channels.addWidget(self.rb_mono)
        self.rb_stereo = QtWidgets.QRadioButton(self.group_encoding)
        self.rb_stereo.setObjectName("rb_stereo")
        self.hbox_channels.addWidget(self.rb_stereo)
        self.rb_multi = QtWidgets.QRadioButton(self.group_encoding)
        self.rb_multi.setObjectName("rb_multi")
        self.hbox_channels.addWidget(self.rb_multi)
        self.sb_channels = QtWidgets.QSpinBox(self.group_encoding)
        self.sb_channels.setEnabled(False)
        self.sb_channels.setMinimum(3)
        self.sb_channels.setObjectName("sb_channels")
        self.hbox_channels.addWidget(self.sb_channels)
        self.grid_encoding.addLayout(self.hbox_channels, 2, 1, 1, 6)
        self.gridLayout_3.addWidget(self.group_encoding, 1, 0, 1, 1)
        self.hbox_buttons = QtWidgets.QHBoxLayout()
        self.hbox_buttons.setObjectName("hbox_buttons")
        self.progressBar = QtWidgets.QProgressBar(MainWindow)
        self.progressBar.setMaximum(1)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setFormat("")
        self.progressBar.setObjectName("progressBar")
        self.hbox_buttons.addWidget(self.progressBar)
        self.b_render = QtWidgets.QPushButton(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/16x16/media-record.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b_render.setIcon(icon)
        self.b_render.setObjectName("b_render")
        self.hbox_buttons.addWidget(self.b_render)
        self.b_stop = QtWidgets.QPushButton(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/16x16/media-playback-stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b_stop.setIcon(icon1)
        self.b_stop.setObjectName("b_stop")
        self.hbox_buttons.addWidget(self.b_stop)
        self.b_close = QtWidgets.QPushButton(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/16x16/window-close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b_close.setIcon(icon2)
        self.b_close.setObjectName("b_close")
        self.hbox_buttons.addWidget(self.b_close)
        self.gridLayout_3.addLayout(self.hbox_buttons, 5, 0, 1, 2)
        self.group_time = QtWidgets.QGroupBox(MainWindow)
        self.group_time.setCheckable(True)
        self.group_time.setObjectName("group_time")
        self.grid_time = QtWidgets.QGridLayout(self.group_time)
        self.grid_time.setObjectName("grid_time")
        self.lbl_start_time = QtWidgets.QLabel(self.group_time)
        self.lbl_start_time.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_start_time.setObjectName("lbl_start_time")
        self.grid_time.addWidget(self.lbl_start_time, 0, 0, 1, 1)
        self.te_start = QtWidgets.QTimeEdit(self.group_time)
        self.te_start.setObjectName("te_start")
        self.grid_time.addWidget(self.te_start, 0, 1, 1, 1)
        self.lbl_end_time = QtWidgets.QLabel(self.group_time)
        self.lbl_end_time.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_end_time.setObjectName("lbl_end_time")
        self.grid_time.addWidget(self.lbl_end_time, 1, 0, 1, 1)
        self.te_end = QtWidgets.QTimeEdit(self.group_time)
        self.te_end.setObjectName("te_end")
        self.grid_time.addWidget(self.te_end, 1, 1, 1, 1)
        self.b_now_start = QtWidgets.QPushButton(self.group_time)
        self.b_now_start.setObjectName("b_now_start")
        self.grid_time.addWidget(self.b_now_start, 0, 2, 1, 1)
        self.b_now_end = QtWidgets.QPushButton(self.group_time)
        self.b_now_end.setObjectName("b_now_end")
        self.grid_time.addWidget(self.b_now_end, 1, 2, 1, 1)
        self.gridLayout_3.addWidget(self.group_time, 1, 1, 1, 1)
        self.group_render = QtWidgets.QGroupBox(MainWindow)
        self.group_render.setObjectName("group_render")
        self.grid_render = QtWidgets.QGridLayout(self.group_render)
        self.grid_render.setObjectName("grid_render")
        self.lbl_extra_args = QtWidgets.QLabel(self.group_render)
        self.lbl_extra_args.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_extra_args.setObjectName("lbl_extra_args")
        self.grid_render.addWidget(self.lbl_extra_args, 4, 0, 1, 1)
        self.lbl_output = QtWidgets.QLabel(self.group_render)
        self.lbl_output.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_output.setObjectName("lbl_output")
        self.grid_render.addWidget(self.lbl_output, 2, 0, 1, 1)
        self.lbl_render_mode = QtWidgets.QLabel(self.group_render)
        self.lbl_render_mode.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_render_mode.setObjectName("lbl_render_mode")
        self.grid_render.addWidget(self.lbl_render_mode, 0, 0, 1, 1)
        self.lbl_filename = QtWidgets.QLabel(self.group_render)
        self.lbl_filename.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lbl_filename.setObjectName("lbl_filename")
        self.grid_render.addWidget(self.lbl_filename, 3, 0, 1, 1)
        self.le_prefix = QtWidgets.QLineEdit(self.group_render)
        self.le_prefix.setText("")
        self.le_prefix.setObjectName("le_prefix")
        self.grid_render.addWidget(self.le_prefix, 3, 2, 1, 3)
        self.le_extra_args = QtWidgets.QLineEdit(self.group_render)
        self.le_extra_args.setText("")
        self.le_extra_args.setObjectName("le_extra_args")
        self.grid_render.addWidget(self.le_extra_args, 4, 2, 1, 3)
        self.hbox_output = QtWidgets.QHBoxLayout()
        self.hbox_output.setContentsMargins(0, -1, -1, -1)
        self.hbox_output.setObjectName("hbox_output")
        self.le_folder = QtWidgets.QLineEdit(self.group_render)
        self.le_folder.setObjectName("le_folder")
        self.hbox_output.addWidget(self.le_folder)
        self.b_open = QtWidgets.QToolButton(self.group_render)
        self.b_open.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/16x16/document-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b_open.setIcon(icon3)
        self.b_open.setObjectName("b_open")
        self.hbox_output.addWidget(self.b_open)
        self.grid_render.addLayout(self.hbox_output, 2, 2, 1, 3)
        self.hbox_rendermode = QtWidgets.QHBoxLayout()
        self.hbox_rendermode.setContentsMargins(-1, -1, 0, -1)
        self.hbox_rendermode.setObjectName("hbox_rendermode")
        self.rb_realtime = QtWidgets.QRadioButton(self.group_render)
        self.rb_realtime.setChecked(True)
        self.rb_realtime.setObjectName("rb_realtime")
        self.hbox_rendermode.addWidget(self.rb_realtime)
        self.rb_freewheel = QtWidgets.QRadioButton(self.group_render)
        self.rb_freewheel.setObjectName("rb_freewheel")
        self.hbox_rendermode.addWidget(self.rb_freewheel)
        self.lbl_bufsize = QtWidgets.QLabel(self.group_render)
        self.lbl_bufsize.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lbl_bufsize.setObjectName("lbl_bufsize")
        self.hbox_rendermode.addWidget(self.lbl_bufsize)
        self.cb_buffer_size = QtWidgets.QComboBox(self.group_render)
        self.cb_buffer_size.setEditable(True)
        self.cb_buffer_size.setFrame(True)
        self.cb_buffer_size.setObjectName("cb_buffer_size")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.cb_buffer_size.addItem("")
        self.hbox_rendermode.addWidget(self.cb_buffer_size)
        self.grid_render.addLayout(self.hbox_rendermode, 0, 2, 1, 3)
        self.gridLayout_3.addWidget(self.group_render, 0, 0, 1, 2)
        self.group_connections = QtWidgets.QGroupBox(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.group_connections.sizePolicy().hasHeightForWidth())
        self.group_connections.setSizePolicy(sizePolicy)
        self.group_connections.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.group_connections.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.group_connections.setCheckable(False)
        self.group_connections.setChecked(False)
        self.group_connections.setObjectName("group_connections")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.group_connections)
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.hbox_source = QtWidgets.QHBoxLayout()
        self.hbox_source.setContentsMargins(-1, 0, 0, -1)
        self.hbox_source.setObjectName("hbox_source")
        self.rb_source_default = QtWidgets.QRadioButton(self.group_connections)
        self.rb_source_default.setChecked(True)
        self.rb_source_default.setObjectName("rb_source_default")
        self.hbox_source.addWidget(self.rb_source_default)
        self.rb_source_manual = QtWidgets.QRadioButton(self.group_connections)
        self.rb_source_manual.setObjectName("rb_source_manual")
        self.hbox_source.addWidget(self.rb_source_manual)
        self.rb_source_selected = QtWidgets.QRadioButton(self.group_connections)
        self.rb_source_selected.setObjectName("rb_source_selected")
        self.hbox_source.addWidget(self.rb_source_selected)
        self.icon_source_help = QtWidgets.QLabel(self.group_connections)
        self.icon_source_help.setPixmap(QtGui.QPixmap(":/icons/16x16/dialog-information.png"))
        self.icon_source_help.setObjectName("icon_source_help")
        self.hbox_source.addWidget(self.icon_source_help)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hbox_source.addItem(spacerItem)
        self.verticalLayout_3.addLayout(self.hbox_source)
        self.frame_ports = QtWidgets.QFrame(self.group_connections)
        self.frame_ports.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_ports.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_ports.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_ports.setLineWidth(0)
        self.frame_ports.setObjectName("frame_ports")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_ports)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.scroll_outputs = QtWidgets.QScrollArea(self.frame_ports)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scroll_outputs.sizePolicy().hasHeightForWidth())
        self.scroll_outputs.setSizePolicy(sizePolicy)
        self.scroll_outputs.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scroll_outputs.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scroll_outputs.setWidgetResizable(True)
        self.scroll_outputs.setAlignment(QtCore.Qt.AlignCenter)
        self.scroll_outputs.setObjectName("scroll_outputs")
        self.scrollarea_outputs = QtWidgets.QWidget()
        self.scrollarea_outputs.setGeometry(QtCore.QRect(0, 0, 418, 223))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollarea_outputs.sizePolicy().hasHeightForWidth())
        self.scrollarea_outputs.setSizePolicy(sizePolicy)
        self.scrollarea_outputs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.scrollarea_outputs.setObjectName("scrollarea_outputs")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollarea_outputs)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lbl_outputs = QtWidgets.QLabel(self.scrollarea_outputs)
        self.lbl_outputs.setObjectName("lbl_outputs")
        self.verticalLayout_2.addWidget(self.lbl_outputs)
        self.tree_outputs = QtWidgets.QTreeView(self.scrollarea_outputs)
        self.tree_outputs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.tree_outputs.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tree_outputs.setProperty("showDropIndicator", False)
        self.tree_outputs.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.tree_outputs.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tree_outputs.setTextElideMode(QtCore.Qt.ElideLeft)
        self.tree_outputs.setObjectName("tree_outputs")
        self.tree_outputs.header().setVisible(False)
        self.verticalLayout_2.addWidget(self.tree_outputs)
        self.scroll_outputs.setWidget(self.scrollarea_outputs)
        self.horizontalLayout.addWidget(self.scroll_outputs)
        self.scroll_inputs = QtWidgets.QScrollArea(self.frame_ports)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scroll_inputs.sizePolicy().hasHeightForWidth())
        self.scroll_inputs.setSizePolicy(sizePolicy)
        self.scroll_inputs.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scroll_inputs.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scroll_inputs.setWidgetResizable(True)
        self.scroll_inputs.setAlignment(QtCore.Qt.AlignCenter)
        self.scroll_inputs.setObjectName("scroll_inputs")
        self.scrollarea_inputs = QtWidgets.QWidget()
        self.scrollarea_inputs.setGeometry(QtCore.QRect(0, 0, 418, 223))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollarea_inputs.sizePolicy().hasHeightForWidth())
        self.scrollarea_inputs.setSizePolicy(sizePolicy)
        self.scrollarea_inputs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.scrollarea_inputs.setObjectName("scrollarea_inputs")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollarea_inputs)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lbl_inputs = QtWidgets.QLabel(self.scrollarea_inputs)
        self.lbl_inputs.setObjectName("lbl_inputs")
        self.verticalLayout.addWidget(self.lbl_inputs)
        self.tree_inputs = QtWidgets.QTreeView(self.scrollarea_inputs)
        self.tree_inputs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.tree_inputs.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tree_inputs.setProperty("showDropIndicator", False)
        self.tree_inputs.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.tree_inputs.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tree_inputs.setTextElideMode(QtCore.Qt.ElideLeft)
        self.tree_inputs.setObjectName("tree_inputs")
        self.tree_inputs.header().setVisible(False)
        self.verticalLayout.addWidget(self.tree_inputs)
        self.scroll_inputs.setWidget(self.scrollarea_inputs)
        self.horizontalLayout.addWidget(self.scroll_inputs)
        self.scroll_inputs.raise_()
        self.scroll_outputs.raise_()
        self.verticalLayout_3.addWidget(self.frame_ports)
        self.gridLayout_3.addWidget(self.group_connections, 2, 0, 1, 2)
        self.lbl_channels.setBuddy(self.rb_mono)
        self.lbl_filetype.setBuddy(self.cb_format)
        self.lbl_bitdepth.setBuddy(self.cb_depth)
        self.lbl_start_time.setBuddy(self.te_start)
        self.lbl_end_time.setBuddy(self.te_end)
        self.lbl_extra_args.setBuddy(self.le_extra_args)
        self.lbl_output.setBuddy(self.le_folder)
        self.lbl_render_mode.setBuddy(self.rb_realtime)
        self.lbl_filename.setBuddy(self.le_prefix)
        self.lbl_bufsize.setBuddy(self.cb_buffer_size)

        self.retranslateUi(MainWindow)
        self.b_close.clicked.connect(MainWindow.close) # type: ignore
        self.rb_multi.toggled['bool'].connect(self.sb_channels.setEnabled) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "JACK Capture"))
        self.group_encoding.setTitle(_translate("MainWindow", "Output File Encoding"))
        self.lbl_format.setText(_translate("MainWindow", "Format:"))
        self.lbl_channels.setText(_translate("MainWindow", "Channels:"))
        self.lbl_filetype.setText(_translate("MainWindow", "Filet&ype:"))
        self.cb_format.setItemText(0, _translate("MainWindow", "aiff"))
        self.cb_format.setItemText(1, _translate("MainWindow", "flac"))
        self.cb_format.setItemText(2, _translate("MainWindow", "mp3"))
        self.cb_format.setItemText(3, _translate("MainWindow", "ogg"))
        self.cb_format.setItemText(4, _translate("MainWindow", "opus"))
        self.cb_format.setItemText(5, _translate("MainWindow", "wav"))
        self.lbl_bitdepth.setText(_translate("MainWindow", "Sam&plesize:"))
        self.cb_depth.setItemText(0, _translate("MainWindow", "8-bit integer"))
        self.cb_depth.setItemText(1, _translate("MainWindow", "16-bit integer"))
        self.cb_depth.setItemText(2, _translate("MainWindow", "24-bit integer"))
        self.cb_depth.setItemText(3, _translate("MainWindow", "32-bit integer"))
        self.cb_depth.setItemText(4, _translate("MainWindow", "32-bit float"))
        self.rb_mono.setText(_translate("MainWindow", "&Mono"))
        self.rb_stereo.setText(_translate("MainWindow", "St&ereo"))
        self.rb_multi.setText(_translate("MainWindow", "Mu&lti:"))
        self.b_render.setText(_translate("MainWindow", "&Record"))
        self.b_stop.setText(_translate("MainWindow", "&Stop"))
        self.b_close.setText(_translate("MainWindow", "&Close"))
        self.group_time.setTitle(_translate("MainWindow", "&Use Transport"))
        self.lbl_start_time.setText(_translate("MainWindow", "St&art Time:"))
        self.te_start.setDisplayFormat(_translate("MainWindow", "hh:mm:ss"))
        self.lbl_end_time.setText(_translate("MainWindow", "&End Time:"))
        self.te_end.setDisplayFormat(_translate("MainWindow", "hh:mm:ss"))
        self.b_now_start.setText(_translate("MainWindow", "now"))
        self.b_now_end.setText(_translate("MainWindow", "now"))
        self.group_render.setTitle(_translate("MainWindow", "Render Options"))
        self.lbl_extra_args.setText(_translate("MainWindow", "E&xtra Arguments:"))
        self.lbl_output.setText(_translate("MainWindow", "&Output folder:"))
        self.lbl_render_mode.setText(_translate("MainWindow", "Render &Mode:"))
        self.lbl_filename.setText(_translate("MainWindow", "&Filename prefix:"))
        self.le_extra_args.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extra command line arguments for jack_capture command.</p><p>Separate arguments by spaces, use shell quoting rules.</p></body></html>"))
        self.rb_realtime.setText(_translate("MainWindow", "Real&time"))
        self.rb_freewheel.setText(_translate("MainWindow", "Free&wheeling"))
        self.lbl_bufsize.setText(_translate("MainWindow", "&Buffer Size:"))
        self.cb_buffer_size.setItemText(0, _translate("MainWindow", "32"))
        self.cb_buffer_size.setItemText(1, _translate("MainWindow", "64"))
        self.cb_buffer_size.setItemText(2, _translate("MainWindow", "128"))
        self.cb_buffer_size.setItemText(3, _translate("MainWindow", "256"))
        self.cb_buffer_size.setItemText(4, _translate("MainWindow", "512"))
        self.cb_buffer_size.setItemText(5, _translate("MainWindow", "1024"))
        self.cb_buffer_size.setItemText(6, _translate("MainWindow", "2048"))
        self.cb_buffer_size.setItemText(7, _translate("MainWindow", "4096"))
        self.cb_buffer_size.setItemText(8, _translate("MainWindow", "8192"))
        self.group_connections.setTitle(_translate("MainWindow", "Recording Sources"))
        self.rb_source_default.setToolTip(_translate("MainWindow", "<html><head/><body><p>jack_capture will record signals from any ports connected to the first two physical outputs.</p></body></html>"))
        self.rb_source_default.setText(_translate("MainWindow", "&Default"))
        self.rb_source_manual.setToolTip(_translate("MainWindow", "<html><head/><body><p>jack_capture will not connect to any ports and you need to connect its input ports manually using another program.</p></body></html>"))
        self.rb_source_manual.setText(_translate("MainWindow", "Ma&nual Connections"))
        self.rb_source_selected.setToolTip(_translate("MainWindow", "<html><head/><body><p>jack_capture will record signals from the selected output (source) ports or any ports connected to the selected input (sink) ports.</p></body></html>"))
        self.rb_source_selected.setText(_translate("MainWindow", "Selected &Ports"))
        self.icon_source_help.setToolTip(_translate("MainWindow", "<html><head/><body><p>jack_capture can connect to any input or output jack port.</p><p>When &quot;connecting&quot; to a jack input port (i.e. a writable port), jack_capture constantly monitors which jack ports are connected to that input port, and makes sure jack_capture is always connected to the same ports.</p><p>In other words, jack_capture will reconnect its ports automatically during recording to match the connections of the ports.</p><p>This is convenient, for instance, when recording the playback ports, since jack_capture can be started first, and then other programs can start and stop at any moment while all sound still should be recorded.</p></body></html>"))
        self.lbl_outputs.setText(_translate("MainWindow", "Outputs (Sources):"))
        self.lbl_inputs.setText(_translate("MainWindow", "Inputs (Sinks):"))
from . import resources_rc
