# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DevicePortOverride',
    'WlanSchedule',
]

@pulumi.output_type
class DevicePortOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portProfileId":
            suggest = "port_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DevicePortOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DevicePortOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DevicePortOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: int,
                 name: Optional[str] = None,
                 port_profile_id: Optional[str] = None):
        """
        :param int number: Switch port number.
        :param str name: Human-readable name of the port.
        :param str port_profile_id: ID of the Port Profile used on this port.
        """
        pulumi.set(__self__, "number", number)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_profile_id is not None:
            pulumi.set(__self__, "port_profile_id", port_profile_id)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        Switch port number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Human-readable name of the port.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portProfileId")
    def port_profile_id(self) -> Optional[str]:
        """
        ID of the Port Profile used on this port.
        """
        return pulumi.get(self, "port_profile_id")


@pulumi.output_type
class WlanSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockEnd":
            suggest = "block_end"
        elif key == "blockStart":
            suggest = "block_start"
        elif key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_end: str,
                 block_start: str,
                 day_of_week: str):
        """
        :param str block_end: Time of day to end the block.
        :param str block_start: Time of day to start the block.
        :param str day_of_week: Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.
        """
        pulumi.set(__self__, "block_end", block_end)
        pulumi.set(__self__, "block_start", block_start)
        pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="blockEnd")
    def block_end(self) -> str:
        """
        Time of day to end the block.
        """
        return pulumi.get(self, "block_end")

    @property
    @pulumi.getter(name="blockStart")
    def block_start(self) -> str:
        """
        Time of day to start the block.
        """
        return pulumi.get(self, "block_start")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.
        """
        return pulumi.get(self, "day_of_week")


