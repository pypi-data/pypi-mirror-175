{"version":3,"sources":["index.tsx"],"names":["i","keycloak","rewritePage","newPage","window","location","origin","pathname","replace","openPopup","url","left","screenX","innerWidth","top","screenY","innerHeight","popup","open","Error","runPopup","Promise","resolve","reject","popupTimer","setInterval","closed","removeEventListener","popupEventListener","clearInterval","event","Object","keys","data","includes","close","addEventListener","setComponentValue","userInfo","authenticated","loadUserInfo","value","access_token","token","refresh_token","refreshToken","user_info","Streamlit","setKeycloakEventListeners","autoRefresh","onAuthError","onAuthRefreshError","onAuthSuccess","onAuthRefreshSuccess","onTokenExpired","updateToken","authenticate","realm","clientId","initOptions","Keycloak","init","onLoad","silentCheckSsoRedirectUri","loginUrl","createLoginUrl","redirectUri","login","events","RENDER_EVENT","detail","args","setComponentReady","setFrameHeight"],"mappings":"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","file":"static/js/main.b9a3beb6.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport Keycloak from \"keycloak-js\"\nimport type { KeycloakInitOptions } from \"keycloak-js\"\n\nconst rewritePage = (newPage: string): string => {\n  return (\n    window.location.origin +\n    window.location.pathname.replace(/\\/[^/]*$/, newPage)\n  )\n}\n\nconst openPopup = (url: string): Window => {\n  const width = 400\n  const height = 600\n  const left = window.screenX + (window.innerWidth - width) / 2\n  const top = window.screenY + (window.innerHeight - height) / 2\n\n  const popup = window.open(\n    url,\n    \"keycloak:authorize:popup\",\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`\n  )\n\n  if (!popup) {\n    throw new Error(\"Unable to open authentication popup\")\n  }\n\n  return popup\n}\n\nconst runPopup = async (popup: Window): Promise<Record<string, string>> => {\n  return new Promise((resolve, reject) => {\n    // Throw exception if popup is closed manually\n    const popupTimer = setInterval(() => {\n      if (popup.closed) {\n        window.removeEventListener(\"message\", popupEventListener, false)\n        clearInterval(popupTimer)\n\n        reject(new Error(\"Authentication popup was closed\"))\n      }\n    }, 1000)\n\n    // Wait for postMessage from popup if login is successful\n    const popupEventListener = function (event: MessageEvent): void {\n      if (!Object.keys(event.data).includes(\"code\")) return\n\n      window.removeEventListener(\"message\", popupEventListener, false)\n      clearInterval(popupTimer)\n\n      popup.close()\n      resolve(event.data)\n    }\n\n    window.addEventListener(\"message\", popupEventListener)\n  })\n}\n\n// Set up the response to Streamlit\nconst setComponentValue = async (): Promise<void> => {\n  if (!keycloak.userInfo && keycloak.authenticated) {\n    await keycloak.loadUserInfo()\n  }\n\n  let value\n  if (keycloak.authenticated) {\n    value = {\n      authenticated: true,\n      access_token: keycloak.token,\n      refresh_token: keycloak.refreshToken,\n      user_info: keycloak.userInfo,\n    }\n  } else {\n    value = { authenticated: false }\n  }\n\n  Streamlit.setComponentValue(value)\n}\n\n// Set up Keycloak events listeners to send state to Steamlit\nconst setKeycloakEventListeners = (autoRefresh: boolean): void => {\n  keycloak.onAuthError = async () => await setComponentValue()\n  keycloak.onAuthRefreshError = async () => await setComponentValue()\n  keycloak.onAuthSuccess = async () => await setComponentValue()\n  keycloak.onAuthRefreshSuccess = async () => await setComponentValue()\n  keycloak.onTokenExpired = async () => {\n    if (!autoRefresh || !keycloak.refreshToken) return\n    await keycloak.updateToken(10)\n  }\n}\n\nconst authenticate = async (\n  url: string,\n  realm: string,\n  clientId: string,\n  autoRefresh: boolean = true,\n  initOptions: KeycloakInitOptions = {}\n): Promise<void> => {\n  keycloak = new Keycloak({\n    url: url,\n    realm: realm,\n    clientId: clientId,\n  })\n\n  setKeycloakEventListeners(autoRefresh)\n\n  // Check if user is already logged in\n  let authenticated = await keycloak.init({\n    ...initOptions,\n    onLoad: \"check-sso\",\n    silentCheckSsoRedirectUri: rewritePage(\"/check-sso.html\"),\n  })\n\n  if (!authenticated) {\n    // If not authenticated, open the popup and have it set cookies\n    const loginUrl = keycloak.createLoginUrl({\n      redirectUri: rewritePage(\"/login.html\"),\n    })\n\n    const popup = openPopup(loginUrl)\n    await runPopup(popup)\n    await keycloak.login()\n  }\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nconst onRender = (event: Event): void => {\n  if (keycloak?.authenticated) return\n\n  const data = (event as CustomEvent<RenderData>).detail\n  const { url, realm, clientId, autoRefresh, initOptions } = data.args\n\n  authenticate(url, realm, clientId, autoRefresh, initOptions)\n}\n\nlet keycloak: Keycloak\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}