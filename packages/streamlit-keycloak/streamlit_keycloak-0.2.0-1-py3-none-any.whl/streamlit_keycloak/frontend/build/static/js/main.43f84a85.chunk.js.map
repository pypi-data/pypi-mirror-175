{"version":3,"sources":["index.tsx"],"names":["i","keycloak","rewritePage","newPage","window","location","origin","pathname","replace","openPopup","url","left","screenX","innerWidth","top","screenY","innerHeight","popup","open","Error","runPopup","Promise","resolve","reject","popupTimer","setInterval","closed","removeEventListener","popupEventListener","clearInterval","event","Object","keys","data","includes","close","addEventListener","setComponentValue","userInfo","loadUserInfo","value","authenticated","token","Streamlit","setKeycloakEventListeners","autoRefresh","onAuthError","onAuthRefreshError","onAuthSuccess","onAuthRefreshSuccess","onTokenExpired","refreshToken","updateToken","authenticate","realm","clientId","initOptions","Keycloak","init","onLoad","silentCheckSsoRedirectUri","loginUrl","createLoginUrl","redirectUri","login","events","RENDER_EVENT","detail","args","setComponentReady","setFrameHeight"],"mappings":"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","file":"static/js/main.43f84a85.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport Keycloak from \"keycloak-js\"\nimport type { KeycloakInitOptions } from \"keycloak-js\"\n\nconst rewritePage = (newPage: string): string => {\n  return (\n    window.location.origin +\n    window.location.pathname.replace(/\\/[^/]*$/, newPage)\n  )\n}\n\nconst openPopup = (url: string): Window => {\n  const width = 400\n  const height = 600\n  const left = window.screenX + (window.innerWidth - width) / 2\n  const top = window.screenY + (window.innerHeight - height) / 2\n\n  const popup = window.open(\n    url,\n    \"keycloak:authorize:popup\",\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`\n  )\n\n  if (!popup) {\n    throw new Error(\"Unable to open authentication popup\")\n  }\n\n  return popup\n}\n\nconst runPopup = async (popup: Window): Promise<Record<string, string>> => {\n  return new Promise((resolve, reject) => {\n    // Throw exception if popup is closed manually\n    const popupTimer = setInterval(() => {\n      if (popup.closed) {\n        window.removeEventListener(\"message\", popupEventListener, false)\n        clearInterval(popupTimer)\n\n        reject(new Error(\"Authentication popup was closed\"))\n      }\n    }, 1000)\n\n    // Wait for postMessage from popup if login is successful\n    const popupEventListener = function (event: MessageEvent): void {\n      if (!Object.keys(event.data).includes(\"code\")) return\n\n      window.removeEventListener(\"message\", popupEventListener, false)\n      clearInterval(popupTimer)\n\n      popup.close()\n      resolve(event.data)\n    }\n\n    window.addEventListener(\"message\", popupEventListener)\n  })\n}\n\n// Set up the response to Streamlit\nconst setComponentValue = async (): Promise<void> => {\n  if (!keycloak.userInfo) {\n    await keycloak.loadUserInfo()\n  }\n\n  let value\n  if (keycloak.authenticated) {\n    value = [true, keycloak.token, keycloak.userInfo]\n  } else {\n    value = [false, null, null]\n  }\n\n  Streamlit.setComponentValue(value)\n}\n\n// Set up Keycloak events listeners to send state to Steamlit\nconst setKeycloakEventListeners = (autoRefresh: boolean): void => {\n  keycloak.onAuthError = async () => await setComponentValue()\n  keycloak.onAuthRefreshError = async () => await setComponentValue()\n  keycloak.onAuthSuccess = async () => await setComponentValue()\n  keycloak.onAuthRefreshSuccess = async () => await setComponentValue()  \n  keycloak.onTokenExpired = async () => {\n    if (!autoRefresh || !keycloak.refreshToken) return\n    await keycloak.updateToken(10)\n  }\n}\n\nconst authenticate = async (\n  url: string,\n  realm: string,\n  clientId: string,\n  autoRefresh: boolean = true,\n  initOptions: KeycloakInitOptions = {}\n): Promise<void> => {\n  keycloak = new Keycloak({\n    url: url,\n    realm: realm,\n    clientId: clientId,\n  })\n\n  setKeycloakEventListeners(autoRefresh)\n\n  // Check if user is already logged in\n  let authenticated = await keycloak.init({\n    ...initOptions,\n    onLoad: \"check-sso\",\n    silentCheckSsoRedirectUri: rewritePage(\"/check-sso.html\"),\n  })\n\n  if (!authenticated) {\n    // If not authenticated, open the popup and have it set cookies\n    const loginUrl = keycloak.createLoginUrl({\n      redirectUri: rewritePage(\"/login.html\"),\n    })\n\n    const popup = openPopup(loginUrl)\n    await runPopup(popup)\n    await keycloak.login()\n  }\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nconst onRender = (event: Event): void => {\n  if (keycloak?.authenticated) return\n\n  const data = (event as CustomEvent<RenderData>).detail\n  const { url, realm, clientId, autoRefresh, initOptions } = data.args\n\n  authenticate(url, realm, clientId, autoRefresh, initOptions)\n}\n\nlet keycloak: Keycloak\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}